Index: app/src/main/res/layout/activity_game_normal.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\r\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".GameNormalActivity\">\r\n\r\n    <androidx.drawerlayout.widget.DrawerLayout\r\n        android:id=\"@+id/drawerLayout_GameNormalActivity\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:orientation=\"vertical\"\r\n            android:weightSum=\"32\">\r\n\r\n\r\n            <HorizontalScrollView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:scrollbars=\"none\"\r\n                app:layout_constraintBottom_toTopOf=\"@+id/cht_snp\"\r\n                app:layout_constraintStart_toStartOf=\"parent\"\r\n                app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:orientation=\"horizontal\"\r\n                    app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n                    <com.github.mikephil.charting.charts.LineChart\r\n                        android:id=\"@+id/cht_fund\"\r\n                        android:layout_width=\"150dp\"\r\n                        android:layout_height=\"120dp\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                    <com.github.mikephil.charting.charts.LineChart\r\n                        android:id=\"@+id/cht_bond\"\r\n                        android:layout_width=\"150dp\"\r\n                        android:layout_height=\"120dp\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                    <com.github.mikephil.charting.charts.LineChart\r\n                        android:id=\"@+id/cht_indpro\"\r\n                        android:layout_width=\"150dp\"\r\n                        android:layout_height=\"120dp\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                    <com.github.mikephil.charting.charts.LineChart\r\n                        android:id=\"@+id/cht_unem\"\r\n                        android:layout_width=\"150dp\"\r\n                        android:layout_height=\"120dp\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                    <com.github.mikephil.charting.charts.LineChart\r\n                        android:id=\"@+id/cht_inf\"\r\n                        android:layout_width=\"150dp\"\r\n                        android:layout_height=\"120dp\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                </LinearLayout>\r\n\r\n            </HorizontalScrollView>\r\n\r\n            <com.github.mikephil.charting.charts.LineChart\r\n                android:id=\"@+id/cht_snp\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"200dp\"\r\n                android:layout_marginBottom=\"200dp\"\r\n                app:layout_constraintBottom_toBottomOf=\"parent\"\r\n                app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"80dp\"\r\n                android:layout_weight=\"2\"\r\n                android:orientation=\"horizontal\"\r\n                android:weightSum=\"1\">\r\n\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"News\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/news\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_weight=\"1\"\r\n                    android:text=\"뉴스내용\" />\r\n\r\n                <ImageView\r\n                    android:layout_width=\"50dp\"\r\n                    android:layout_height=\"match_parent\"\r\n\r\n                    />\r\n\r\n            </LinearLayout>\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_weight=\"4\"\r\n                android:orientation=\"horizontal\">\r\n\r\n                <ScrollView\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"60dp\"\r\n                    android:layout_weight=\"5\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"40dp\"\r\n                        android:layout_weight=\"1\"\r\n                        android:orientation=\"vertical\">\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/assets\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"총자산:    \" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/cash\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"현금:     \" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/purchase\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"매입금액:     \" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/evaluation\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"원화평가금액:    \" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/profit\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"수익률:  \" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/item1\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"아이템1:  \" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/item2\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"아이템2:  \" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/item3\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"아이템3:  \" />\r\n                    </LinearLayout>\r\n                </ScrollView>\r\n\r\n                <Button\r\n                    android:id=\"@+id/btn_myAssetStateDrawerOpen\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"60dp\"\r\n                    android:layout_weight=\"1\"\r\n                    android:backgroundTint=\"@color/browser_actions_bg_grey\"\r\n                    android:text=\"자세히\" />\r\n            </LinearLayout>\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"60dp\"\r\n                android:layout_weight=\"3\"\r\n                android:orientation=\"horizontal\"\r\n                android:weightSum=\"4\">\r\n\r\n                <Button\r\n                    android:id=\"@+id/buy_btn\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_weight=\"1\"\r\n                    android:background=\"@color/white\"\r\n                    android:text=\"매수\"\r\n                    android:textColor=\"@android:color/holo_red_light\"\r\n\r\n                    />\r\n\r\n                <Button\r\n                    android:id=\"@+id/sell_btn\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_weight=\"1\"\r\n                    android:background=\"@color/white\"\r\n                    android:text=\"매도\"\r\n                    android:textColor=\"@android:color/holo_blue_bright\" />\r\n\r\n                <Button\r\n                    android:id=\"@+id/auto_btn\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_weight=\"1\"\r\n                    android:background=\"@color/white\"\r\n                    android:text=\"자동\"\r\n                    android:textColor=\"@color/black\" />\r\n\r\n                <Button\r\n                    android:id=\"@+id/item_btn\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_weight=\"1\"\r\n                    android:background=\"@color/white\"\r\n                    android:text=\"아이템\"\r\n                    android:textColor=\"@color/black\" />\r\n\r\n            </LinearLayout>\r\n        </LinearLayout>\r\n\r\n        <View\r\n            android:id=\"@+id/buy_dialog_view\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\" />\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/linearLayout_myAssetState\"\r\n            android:layout_width=\"320dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_gravity=\"right\"\r\n            android:background=\"@color/purple_200\"\r\n            android:orientation=\"horizontal\">\r\n\r\n            <Button\r\n                android:id=\"@+id/btn_myAssetStateDrawerClose\"\r\n                android:layout_width=\"30dp\"\r\n                android:layout_height=\"match_parent\"\r\n                android:text=\">\" />\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:orientation=\"vertical\">\r\n\r\n                <TextView\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_margin=\"10dp\"\r\n                    android:gravity=\"center\"\r\n                    android:text=\"내 자산 현황\"\r\n                    android:textSize=\"20dp\" />\r\n\r\n                <com.github.mikephil.charting.charts.LineChart\r\n                    android:id=\"@+id/cht_assetsDrawer\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"200dp\"\r\n                    android:layout_margin=\"10dp\"\r\n                    android:layout_gravity=\"center\"/>\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_margin=\"10dp\"\r\n                    android:orientation=\"horizontal\">\r\n\r\n                    <TextView\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_weight=\"2\"\r\n                        android:text=\"총 자산\"\r\n                        android:textSize=\"15dp\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/textView_assetsDrawer\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_weight=\"1\"\r\n                        android:text=\"00000\"\r\n                        android:textSize=\"15dp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_margin=\"10dp\"\r\n                    android:orientation=\"horizontal\">\r\n\r\n                    <TextView\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_weight=\"2\"\r\n                        android:text=\"현금\"\r\n                        android:textSize=\"15dp\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/textView_cashDrawer\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_weight=\"1\"\r\n                        android:text=\"00000\"\r\n                        android:textSize=\"15dp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_margin=\"10dp\"\r\n                    android:orientation=\"horizontal\">\r\n\r\n                    <TextView\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_weight=\"2\"\r\n                        android:text=\"매입금액\"\r\n                        android:textSize=\"15dp\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/textView_purchaseDrawer\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_weight=\"1\"\r\n                        android:text=\"00000\"\r\n                        android:textSize=\"15dp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_margin=\"10dp\"\r\n                    android:orientation=\"horizontal\">\r\n\r\n                    <TextView\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_weight=\"2\"\r\n                        android:text=\"원화평가금액\"\r\n                        android:textSize=\"15dp\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/textView_evaluationDrawer\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_weight=\"1\"\r\n                        android:text=\"00000\"\r\n                        android:textSize=\"15dp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_margin=\"10dp\"\r\n                    android:orientation=\"horizontal\">\r\n\r\n                    <TextView\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_weight=\"2\"\r\n                        android:text=\"수익율\"\r\n                        android:textSize=\"15dp\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/textView_profitDrawer\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_weight=\"1\"\r\n                        android:text=\"00000\"\r\n                        android:textSize=\"15dp\" />\r\n                </LinearLayout>\r\n            </LinearLayout>\r\n        </LinearLayout>\r\n\r\n    </androidx.drawerlayout.widget.DrawerLayout>\r\n</FrameLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_game_normal.xml	(revision 184d1428f0a433af577a4e8281776ee960b21e67)
+++ app/src/main/res/layout/activity_game_normal.xml	(date 1612420837480)
@@ -237,11 +237,6 @@
             </LinearLayout>
         </LinearLayout>
 
-        <View
-            android:id="@+id/buy_dialog_view"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content" />
-
         <LinearLayout
             android:id="@+id/linearLayout_myAssetState"
             android:layout_width="320dp"
Index: app/src/main/java/com/example/myapplication/GameNormalActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication\r\n\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.example.myapplication.data.GameNormal\r\nimport com.example.myapplication.data.GameNormalDB\r\nimport com.github.mikephil.charting.charts.LineChart\r\nimport com.github.mikephil.charting.data.Entry\r\nimport com.github.mikephil.charting.data.LineData\r\nimport com.github.mikephil.charting.data.LineDataSet\r\nimport com.google.gson.Gson\r\nimport com.google.gson.GsonBuilder\r\nimport kotlinx.coroutines.*\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport java.text.SimpleDateFormat\r\nimport java.time.LocalDateTime\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// 버튼 클릭 판별자 생성\r\nvar click: Boolean = false // 매수, 매도, 자동, 아이템 다이얼로그의 버튼들에 적용\r\nvar gameend: Boolean = false // 게임 종료시 적용\r\n////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\nclass GameNormalActivity : AppCompatActivity() {\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // 차트 데이터 및 차트 설정 변수 생성\r\n    private val gl = 2500 // Game Length: 10, 20년(휴일, 공휴일로 인해 1년은 대략 250 거래일)\r\n    private val given = 1250 // 게임 시작시 주어지는 과거 데이터의 구간: 5년\r\n\r\n    // 유효구간 가운데 랜덤으로 시작 시점 산출 /////////////////////////////////////////////////////\r\n    // 5년은 대략 1250 거래일.\r\n    // 게임 시작 시점으로부터 5년 전, 10년 후의 데이터 확보가 가능해야함.\r\n    // 일부 데이터는 뒤에서 약 21번째 행까지 날짜는 존재하나 값들은 null 인 경우가 존재함 -> 범위에서 30만큼 빼줌.\r\n    // 따라서 시작시점은 총 데이터 갯수로부터 15년에 해당하는 3750 + 30을 뺀 구간에서,\r\n    // 랜덤으로 숫자를 산출한 뒤 다시 1250을 더해준 값임.\r\n    private val random = Random()\r\n    private val sp = random.nextInt((snp_date.size - gl - given - 30)) + given // Starting Point\r\n\r\n\r\n    // 차트 데이터 생성 ////////////////////////////////////////////////////////////////////////////\r\n    // Entry 배열 생성\r\n    private val snpEn: ArrayList<Entry> = ArrayList()\r\n    private val fundEn: ArrayList<Entry> = ArrayList()\r\n    private val bondEn: ArrayList<Entry> = ArrayList()\r\n    private val indproEn: ArrayList<Entry> = ArrayList()\r\n    private val unemEn: ArrayList<Entry> = ArrayList()\r\n    private val infEn: ArrayList<Entry> = ArrayList()\r\n\r\n    // 그래프 구현을 위한 LineDataSet 생성\r\n    private val snpDs: LineDataSet = LineDataSet(snpEn, \"S&P500 Index\")\r\n    private val fundDs: LineDataSet = LineDataSet(fundEn, \"Fund Rate\")\r\n    private val bondDs: LineDataSet = LineDataSet(bondEn, \"bond Rate\")\r\n    private val indproDs: LineDataSet = LineDataSet(indproEn, \"Ind Pro Rate\")\r\n    private val unemDs: LineDataSet = LineDataSet(unemEn, \"Un Em Rate\")\r\n    private val infDs: LineDataSet = LineDataSet(infEn, \"Infla Rate\")\r\n\r\n    // 그래프 data 생성 -> 최종 입력 데이터\r\n    private val snpD: LineData = LineData(snpDs)\r\n    private val fundD: LineData = LineData(fundDs)\r\n    private val bondD: LineData = LineData(bondDs)\r\n    private val indproD: LineData = LineData(indproDs)\r\n    private val unemD: LineData = LineData(unemDs)\r\n    private val infD: LineData = LineData(infDs)\r\n\r\n    // 차트 데이터 추가\r\n    private var fundIndex: Int = 0\r\n    private var bondIndex: Int = 0\r\n    private var indproIndex: Int = 0\r\n    private var unemIndex: Int = 0\r\n    private var infIndex: Int = 0\r\n\r\n    // 차트 설정\r\n    private val snpLineColor: String = \"#1A237E\" // S&P 선 색깔\r\n    private val snpFillColor: String = \"#1565C0\" // S&P 채움 색깔\r\n    private val snpHighColor: String = \"#B71C1C\" // S&P 하이라이트 색깔\r\n    private val ecoLineColor: String = \"#1A237E\" // 경제 지표 선 색깔\r\n\r\n\r\n    // Count 값들 //////////////////////////////////////////////////////////////////////////////////\r\n    private var dayPlus: Int = 1 // sp(Starting Point) 이후 경과한 거래일 수\r\n    private var fundCount: Int = 0\r\n    private var bondCount: Int = 0\r\n    private var indproCount: Int = 0\r\n    private var unemCount: Int = 0\r\n    private var infCount: Int = 0\r\n\r\n\r\n    // 매수, 매도 외 기타 버튼 클릭 시 사용되는 변수 ///////////////////////////////////////////////\r\n\r\n    // 일시정지 시 현재 값 저장\r\n    private var snpNowDate: String = \"yyyy-mm-dd\"\r\n    private var snpNowdays: Int = 0\r\n    private var snpNowVal: Float = 0F\r\n    private var snpBeforeVal : Float = 0F\r\n\r\n\r\n    // 시간관련 ////////////////////////////////////////////////////////////////////////////////////\r\n    // oneday + btnRefresh = 게임상에서의 1 거래일의 실제 시간\r\n    private val oneday: Long = 240 // 거래일 간 간격\r\n    private val btnRefresh: Long = 10 // 버튼 Refresh 조회 간격 [ms]\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    //Roomdata관련\r\n    private var gameNormalDb : GameNormalDB? = null\r\n    private var gameHistory = listOf<GameNormal>()\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_game_normal)\r\n\r\n        gameNormalDb = GameNormalDB.getInstace(this)\r\n\r\n        //변수 선언\r\n        val buy_btn = findViewById<Button>(R.id.buy_btn)\r\n        val startcash: Float = 5000000F\r\n        val startpurchase: Float = 0F\r\n        val startevaluation: Float = 0F\r\n        val startprofit: Float = 0F\r\n        val startitem1: Int = 0\r\n        val startitem2: Int = 0\r\n        val startitem3: Int = 0\r\n        var uassets: Float = 0F\r\n        var ucash: Float = 0F\r\n        var upurchase: Float = 0F\r\n        var uevaluation: Float = 0F\r\n        var uprofit: Float = 0F\r\n        var uitem1count: Int = 0\r\n        var uitem2count: Int = 0\r\n        var uitem3count: Int = 0\r\n        var localDatatime: LocalDateTime = LocalDateTime.now()\r\n        val assets = findViewById<TextView>(R.id.assets)\r\n        val cash = findViewById<TextView>(R.id.cash)\r\n        val purchase = findViewById<TextView>(R.id.purchase)\r\n        val evaluation = findViewById<TextView>(R.id.evaluation)\r\n        val profit = findViewById<TextView>(R.id.profit)\r\n        val item1 = findViewById<TextView>(R.id.item1)\r\n        val item2 = findViewById<TextView>(R.id.item2)\r\n        val item3 = findViewById<TextView>(R.id.item3)\r\n        val startRunnable = Runnable {\r\n            gameHistory = gameNormalDb!!.gameNormalDao().getAll()\r\n        }\r\n        val startThread = Thread(startRunnable)\r\n        startThread.start()\r\n\r\n        // drawer variable declearation\r\n        val drawerLayout_GameNormalActivity = findViewById<DrawerLayout>(R.id.drawerLayout_GameNormalActivity)\r\n        val view_myAssetState = findViewById<View>(R.id.linearLayout_myAssetState)\r\n        val btn_myAssetStateDrawerOpen = findViewById<Button>(R.id.btn_myAssetStateDrawerOpen)\r\n        val btn_myAssetStateDrawerClose = findViewById<Button>(R.id.btn_myAssetStateDrawerClose)\r\n\r\n\r\n        //Buy Dialog로 부터 결과를 받아오는 list\r\n        lateinit var buy: List<Float>\r\n        lateinit var sell: List<Float>\r\n        lateinit var item: List<Int>\r\n\r\n\r\n        //viewModel 객체\r\n        val viewModel = ViewModelProvider(this, ViewModelProvider.NewInstanceFactory()).get(\r\n            GameNormalActivityVeiwModel::class.java\r\n        ).also {\r\n            //초기화\r\n            if(gameNormalDb?.gameNormalDao()?.getId()?.isEmpty() == true) {\r\n                it.initialize(startcash, startpurchase, startevaluation, startprofit, startitem1, startitem2, startitem3)\r\n            }else{\r\n                it.initialize(gameNormalDb?.gameNormalDao()?.getAll()?.last()!!.cash,\r\n                    gameNormalDb?.gameNormalDao()?.getAll()?.last()!!.purchaseamount,\r\n                    gameNormalDb?.gameNormalDao()?.getAll()?.last()!!.evaluation,\r\n                    gameNormalDb?.gameNormalDao()?.getAll()?.last()!!.profit,\r\n                    gameNormalDb?.gameNormalDao()?.getAll()?.last()!!.item1count,\r\n                    gameNormalDb?.gameNormalDao()?.getAll()?.last()!!.item2count,\r\n                    gameNormalDb?.gameNormalDao()?.getAll()?.last()!!.item3count)\r\n            }\r\n\r\n        }\r\n\r\n        ////////////////////////////////////////////////////////////////////////////////////////////\r\n        // 차트 click, gameend 변수 초기화\r\n        click = false\r\n        gameend  = false\r\n\r\n        //실시간 data 반영\r\n        viewModel.assets().observe(this, Observer {\r\n            assets.text = \"총자산: \" + it.toString() + \"원\"\r\n            uassets = it\r\n        })\r\n        viewModel.cash().observe(this, Observer {\r\n            cash.text = \"현금: \" + it.toString() + \"원\"\r\n            ucash = it\r\n        })\r\n        viewModel.purchase().observe(this, Observer {\r\n            purchase.text = \"매입금액: \" + it.toString() + \"원\"\r\n            upurchase = it\r\n        })\r\n        viewModel.evaluation().observe(this, Observer {\r\n            evaluation.text = \"원화평가금액: \" + it.toString() + \"원\"\r\n            uevaluation = it\r\n        })\r\n        viewModel.profit().observe(this, Observer {\r\n            profit.text = \"수익률\" + it.toString() + \"%\"\r\n            uprofit = it\r\n        })\r\n        viewModel.item1().observe(this, Observer {\r\n            item1.text = \"아이템1: \" + it.toString() + \"개\"\r\n            uitem1count = it\r\n        })\r\n        viewModel.item2().observe(this, Observer {\r\n            item2.text = \"아이템2: \" + it.toString() + \"개\"\r\n            uitem2count = it\r\n        })\r\n        viewModel.item3().observe(this, Observer {\r\n            item3.text = \"아이템3: \" + it.toString() + \"개\"\r\n            uitem3count = it\r\n        })\r\n\r\n        //Button 동작\r\n\r\n        //매수\r\n        buy_btn.setOnClickListener {\r\n            val dlg_buy = Dialog_buy(this)\r\n            val layoutInflater_buy: LayoutInflater = getLayoutInflater()\r\n            val builder_buy = AlertDialog.Builder(this)\r\n            val addRunnable = Runnable {\r\n                localDatatime = LocalDateTime.now()\r\n                val newhistory = GameNormal(localDatatime.toString(),uassets,ucash,upurchase,uevaluation,uprofit,\"매수\",buy[0],buy[1],\"\",uitem1count,uitem2count,uitem3count)\r\n                gameNormalDb?.gameNormalDao()?.insert(newhistory)\r\n            }\r\n            dlg_buy.start(viewModel.cash().value!!)\r\n            dlg_buy.setOnBuyClickedListener { content ->\r\n                buy = content\r\n                viewModel.buyStock(buy[0], buy[1])\r\n                if(buy[0]>0F){\r\n                    val addThread = Thread(addRunnable)\r\n                    addThread.start()\r\n                }\r\n            }\r\n            click = !click //////////////////////////////////////////////////////////////////////////\r\n        }\r\n\r\n        //매도\r\n        val sell_btn = findViewById<Button>(R.id.sell_btn)\r\n        sell_btn.setOnClickListener {\r\n            val dlg_sell = Dialog_sell(this)\r\n            val layoutInflater_sell: LayoutInflater = getLayoutInflater()\r\n            val builder_sell = AlertDialog.Builder(this)\r\n            val addRunnable = Runnable {\r\n                localDatatime = LocalDateTime.now()\r\n                val newhistory = GameNormal(localDatatime.toString(),uassets,ucash,upurchase,uevaluation,uprofit,\"매도\",sell[0],sell[1],\"\",uitem1count,uitem2count,uitem3count)\r\n                gameNormalDb?.gameNormalDao()?.insert(newhistory)\r\n            }\r\n            dlg_sell.start(viewModel.evaluation().value!!)\r\n            dlg_sell.setOnSellClickedListener { content ->\r\n                sell = content\r\n                viewModel.sellStock(sell[0], sell[1])\r\n                if(sell[0]>0F){\r\n                    val addThread = Thread(addRunnable)\r\n                    addThread.start()\r\n                }\r\n            }\r\n            click = !click /////////////////////////////////////////////////////////////////////////\r\n        }\r\n\r\n        val auto_btn = findViewById<Button>(R.id.auto_btn)\r\n        auto_btn.setOnClickListener {\r\n            val layoutInflater: LayoutInflater = getLayoutInflater()\r\n            val builder = AlertDialog.Builder(this)\r\n//            val u_id = \" \"\r\n//            val u_pw = \" \"\r\n//            val u_date = \" \"\r\n//            getRoomListDataHttp(u_id, u_pw, u_date)\r\n            getRoomListDataHttp()\r\n            click = !click /////////////////////////////////////////////////////////////////////////\r\n        }\r\n\r\n        val item_btn = findViewById<Button>(R.id.item_btn)\r\n        item_btn.setOnClickListener {\r\n            val dlg_item = Dialog_item(this)\r\n            dlg_item.start(\r\n                viewModel.item1().value!!,\r\n                viewModel.item2().value!!,\r\n                viewModel.item3().value!!\r\n            )\r\n            dlg_item.setOnItemClickedListener { content ->\r\n                item = content\r\n                viewModel.setitem(item[0], item[1], item[2])\r\n            }\r\n//            Toast.makeText(this, startitem1, Toast.LENGTH_LONG).show()\r\n            click = !click /////////////////////////////////////////////////////////////////////////\r\n        }\r\n\r\n\r\n        // 차트 ////////////////////////////////////////////////////////////////////////////////////\r\n        // 차트 코루틴 시작\r\n        CoroutineScope(Dispatchers.Default).launch {\r\n            val chartdata = launch {\r\n                chartdata()\r\n            }\r\n\r\n            chartdata.join()\r\n\r\n            val inidraw = launch {\r\n                inidraw()\r\n            }\r\n\r\n            inidraw.join()\r\n            snpBeforeVal=snpNowVal\r\n            nowdraw()\r\n            viewModel.priceUpdate(snpNowVal, snpBeforeVal)\r\n\r\n\r\n\r\n        }\r\n        ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        // DrawerLayout ////////////////////////////////////////////////////////////////////////////\r\n        drawerLayout_GameNormalActivity.closeDrawer(view_myAssetState)\r\n        btn_myAssetStateDrawerClose.setOnClickListener {\r\n            drawerLayout_GameNormalActivity.closeDrawer(view_myAssetState)\r\n        }\r\n\r\n        btn_myAssetStateDrawerOpen.setOnClickListener {\r\n            drawerLayout_GameNormalActivity.openDrawer(view_myAssetState)\r\n        }\r\n\r\n    }\r\n\r\n    // 데이터 가지고 오기\r\n    fun getRoomListDataHttp() {\r\n        val u_id = \"\"\r\n        val u_pw = \"\"\r\n        val u_date = \"\"\r\n        val url: String = \"http://stockgame.dothome.co.kr/test/call.php/\"\r\n        Log.d(\"데이터 받기 \", \"받기시도 중\")\r\n        var gson: Gson = GsonBuilder()\r\n            .setLenient()\r\n            .create()\r\n        //creating retrofit object\r\n        var retrofit =\r\n            Retrofit.Builder()\r\n                .baseUrl(url)\r\n                .addConverterFactory(GsonConverterFactory.create(gson))\r\n                .build()\r\n\r\n        //creating our api\r\n        var server = retrofit.create(RetrofitGet::class.java)\r\n        server.getdata(u_id, u_pw, u_date).enqueue(object : Callback<String> {\r\n            override fun onFailure(call: Call<String>, t: Throwable) {\r\n                //Toast.makeText(this@Initial, \" \", Toast.LENGTH_LONG).show()\r\n                //Log.d(\"data: \",data)\r\n            }\r\n\r\n            override fun onResponse(call: Call<String>, response: retrofit2.Response<String>) {\r\n                //Toast.makeText(this@Initial, \"bbbbbbb\", Toast.LENGTH_LONG).show()\r\n                if (response.isSuccessful && response.body() != null) {\r\n                    val getted_name: String = response.body()!!\r\n                    Toast.makeText(this@GameNormalActivity, getted_name, Toast.LENGTH_LONG).show()\r\n                    Log.d(\"---:\", response.isSuccessful.toString())\r\n                    // Toast.makeText(this@GameNormalActivity, response.isSuccessful, Toast.LENGTH_LONG).show()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        val dlg_exit = Dialog_game_exit(this@GameNormalActivity)\r\n        dlg_exit.start()\r\n        click = !click /////////////////////////////////////////////////////////////////////////////\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // 차트 Entry, LineData, LineDataSet 생성 및 입력, 경제지표 과거 5년 차트 생성\r\n    private fun chartdata() {\r\n        // Entry 배열 초기값 입력\r\n        snpEn.add(Entry(-1250F, snp_val[sp - given].toFloat()))\r\n        fundEn.add(Entry(-1250F, fund_val[0].toFloat()))\r\n        bondEn.add(Entry(-1250F, bond_val[0].toFloat()))\r\n        indproEn.add(Entry(-1250F, indpro_val[0].toFloat()))\r\n        unemEn.add(Entry(-1250F, unem_val[0].toFloat()))\r\n        infEn.add(Entry(-1250F, inf_val[0].toFloat()))\r\n\r\n\r\n        // 차트 설정\r\n        snpDs.color = Color.parseColor(snpLineColor) // 차트 선\r\n        snpDs.setDrawCircles(false)\r\n        snpDs.setDrawValues(false) // 차트 지점마다 값 표시\r\n        snpDs.lineWidth = 1.5F\r\n        snpDs.fillAlpha = 80 // 차트 스커트\r\n        snpDs.fillColor = Color.parseColor(snpFillColor)\r\n        snpDs.setDrawFilled(true)\r\n        snpDs.highLightColor = Color.parseColor(snpHighColor) // 터치 시 하이라이트\r\n        snpDs.highlightLineWidth = 1F\r\n\r\n        fundDs.color = Color.parseColor(ecoLineColor)\r\n        fundDs.setDrawCircles(false) // 지점마다 원 표시\r\n        fundDs.setDrawValues(false) // 지점마다 값 표시\r\n        fundDs.lineWidth = 0.7F // 선 굵기\r\n\r\n        bondDs.color = Color.parseColor(ecoLineColor)\r\n        bondDs.setDrawCircles(false) // 지점마다 원 표시\r\n        bondDs.setDrawValues(false) // 지점마다 값 표시\r\n        bondDs.lineWidth = 0.7F // 선 굵기\r\n\r\n        indproDs.color = Color.parseColor(ecoLineColor)\r\n        indproDs.setDrawCircles(false) // 지점마다 원 표시\r\n        indproDs.setDrawValues(false) // 지점마다 값 표시\r\n        indproDs.lineWidth = 0.7F // 선 굵기\r\n\r\n        unemDs.color = Color.parseColor(ecoLineColor)\r\n        unemDs.setDrawCircles(false) // 지점마다 원 표시\r\n        unemDs.setDrawValues(false) // 지점마다 값 표시\r\n        unemDs.lineWidth = 0.7F // 선 굵기\r\n\r\n        infDs.color = Color.parseColor(ecoLineColor)\r\n        infDs.setDrawCircles(false) // 지점마다 원 표시\r\n        infDs.setDrawValues(false) // 지점마다 값 표시\r\n        infDs.lineWidth = 0.7F // 선 굵기\r\n\r\n\r\n        for (i in 0..(given - 1)) {\r\n            snpD.addEntry(\r\n                Entry((i + 1 - given).toFloat(), snp_val[sp - given + 1 + i].toFloat()),\r\n                0\r\n            )\r\n\r\n            var sf = SimpleDateFormat(\"yyyy-MM-dd\") // 날짜 형식\r\n            var snpDate = snp_date[sp - given + 1 + i]\r\n            var snpDateSf = sf.parse(snpDate) // 기준 일자 (SNP 날짜)\r\n\r\n            var fundDate = fund_date[fundIndex]\r\n            var fundDateSf = sf.parse(fundDate)\r\n            var bondDate = bond_date[bondIndex]\r\n            var bondDateSf = sf.parse(bondDate)\r\n            var indproDate = indpro_date[indproIndex]\r\n            var indproDateSf = sf.parse(indproDate)\r\n            var unemDate = unem_date[unemIndex]\r\n            var unemDateSf = sf.parse(unemDate)\r\n            var infDate = inf_date[infIndex]\r\n            var infDateSf = sf.parse(infDate)\r\n\r\n            var fundC = snpDateSf.time - fundDateSf.time\r\n            var bondC = snpDateSf.time - bondDateSf.time\r\n            var indproC = snpDateSf.time - indproDateSf.time\r\n            var unemC = snpDateSf.time - unemDateSf.time\r\n            var infC = snpDateSf.time - infDateSf.time\r\n\r\n            while (fundC > 0) {\r\n                fundIndex += 1\r\n                fundDate = fund_date[fundIndex]\r\n                fundDateSf = sf.parse(fundDate)\r\n                fundC = snpDateSf.time - fundDateSf.time\r\n            }\r\n            fundCount += 1\r\n            fundD.addEntry(Entry((fundCount - 1250).toFloat(), fund_val[fundIndex].toFloat()), 0)\r\n            println(\"fund date : $fundDate\")\r\n\r\n            while (bondC > 0) {\r\n                bondIndex += 1\r\n                bondDate = bond_date[bondIndex]\r\n                bondDateSf = sf.parse(bondDate)\r\n                bondC = snpDateSf.time - bondDateSf.time\r\n            }\r\n            bondCount += 1\r\n            bondD.addEntry(Entry((bondCount - 1250).toFloat(), bond_val[bondIndex].toFloat()), 0)\r\n\r\n            while (indproC > 0) {\r\n                indproIndex += 1\r\n                indproDate = indpro_date[indproIndex]\r\n                indproDateSf = sf.parse(indproDate)\r\n                indproC = snpDateSf.time - indproDateSf.time\r\n            }\r\n            indproCount += 1\r\n            indproD.addEntry(\r\n                Entry(\r\n                    (indproCount - 1250).toFloat(),\r\n                    indpro_val[indproIndex - 1].toFloat()\r\n                ), 0\r\n            )\r\n\r\n            while (unemC > 0) {\r\n                unemIndex += 1\r\n                unemDate = unem_date[unemIndex]\r\n                unemDateSf = sf.parse(unemDate)\r\n                unemC = snpDateSf.time - indproDateSf.time\r\n            }\r\n            unemCount += 1\r\n            unemD.addEntry(\r\n                Entry((unemCount - 1250).toFloat(), unem_val[unemIndex - 1].toFloat()),\r\n                0\r\n            )\r\n\r\n            while (infC > 0) {\r\n                infIndex += 1\r\n                infDate = inf_date[infIndex]\r\n                infDateSf = sf.parse(infDate)\r\n                infC = snpDateSf.time - infDateSf.time\r\n            }\r\n            infCount += 1\r\n            infD.addEntry(Entry((infCount - 1250).toFloat(), inf_val[infIndex - 1].toFloat()), 0)\r\n            println(\"인덱스 : $i\")\r\n        }\r\n        println(\"Fund count : $fundCount\")\r\n        println(\"랜덤넘버 COUNT : \" + sp.toString() + \" | \" + \"시작 날짜 : \" + snp_date[sp])\r\n        // 차트 데이터 생성 끝 /////////////////////////////////////////////////////////////\r\n\r\n\r\n        // layout 에 배치된 lineChart 에 데이터 연결\r\n        findViewById<LineChart>(R.id.cht_snp).data = snpD\r\n        findViewById<LineChart>(R.id.cht_fund).data = fundD\r\n        findViewById<LineChart>(R.id.cht_bond).data = bondD\r\n        findViewById<LineChart>(R.id.cht_indpro).data = indproD\r\n        findViewById<LineChart>(R.id.cht_unem).data = unemD\r\n        findViewById<LineChart>(R.id.cht_inf).data = infD\r\n\r\n\r\n        // 차트 레이아웃 생성 //////////////////////////////////////////////////////////////\r\n        runOnUiThread {\r\n            // 차트 생성\r\n            findViewById<LineChart>(R.id.cht_snp).animateXY(1, 1)\r\n            findViewById<LineChart>(R.id.cht_fund).animateXY(1, 1)\r\n            findViewById<LineChart>(R.id.cht_bond).animateXY(1, 1)\r\n            findViewById<LineChart>(R.id.cht_indpro).animateXY(1, 1)\r\n            findViewById<LineChart>(R.id.cht_unem).animateXY(1, 1)\r\n            findViewById<LineChart>(R.id.cht_inf).animateXY(1, 1)\r\n            findViewById<LineChart>(R.id.cht_fund).setTouchEnabled(false)\r\n            findViewById<LineChart>(R.id.cht_bond).setTouchEnabled(false)\r\n            findViewById<LineChart>(R.id.cht_indpro).setTouchEnabled(false)\r\n            findViewById<LineChart>(R.id.cht_unem).setTouchEnabled(false)\r\n            findViewById<LineChart>(R.id.cht_inf).setTouchEnabled(false)\r\n            findViewById<LineChart>(R.id.cht_fund).setVisibleXRangeMaximum(1250F)\r\n            findViewById<LineChart>(R.id.cht_bond).setVisibleXRangeMaximum(1250F)\r\n            findViewById<LineChart>(R.id.cht_indpro).setVisibleXRangeMaximum(1250F)\r\n            findViewById<LineChart>(R.id.cht_unem).setVisibleXRangeMaximum(1250F)\r\n            findViewById<LineChart>(R.id.cht_inf).setVisibleXRangeMaximum(1250F)\r\n        }\r\n\r\n        // 추가분 반영\r\n        findViewById<LineChart>(R.id.cht_snp).notifyDataSetChanged()\r\n        findViewById<LineChart>(R.id.cht_fund).notifyDataSetChanged()\r\n        findViewById<LineChart>(R.id.cht_bond).notifyDataSetChanged()\r\n        findViewById<LineChart>(R.id.cht_indpro).notifyDataSetChanged()\r\n        findViewById<LineChart>(R.id.cht_unem).notifyDataSetChanged()\r\n        findViewById<LineChart>(R.id.cht_inf).notifyDataSetChanged()\r\n\r\n        snpD.notifyDataChanged()\r\n        fundD.notifyDataChanged()\r\n        bondD.notifyDataChanged()\r\n        unemD.notifyDataChanged()\r\n        infD.notifyDataChanged()\r\n    }\r\n\r\n    // S&P500 과거 5년간의 차트 그리기\r\n    private suspend fun inidraw() {\r\n        for (i in 0..(given - 1)) {\r\n            delay(1)\r\n            findViewById<LineChart>(R.id.cht_snp).setVisibleXRangeMaximum(125F) // 125 거래일 ~ 6개월\r\n            findViewById<LineChart>(R.id.cht_snp).moveViewToX((i + 1 - given).toFloat())\r\n        }\r\n\r\n    }\r\n\r\n    // Real time 차트 생성 및 현재 데이터 저장\r\n    private suspend fun nowdraw() {\r\n// 현재 데이터\r\n        while (true) {\r\n            if (!gameend) {\r\n                if (!click) {\r\n                    if (dayPlus <= gl) {\r\n\r\n                        delay(oneday) // 게임상에서 1 거래일의 실제시간\r\n\r\n\r\n                        var sf = SimpleDateFormat(\"yyyy-MM-dd\") // 날짜 형식\r\n                        var snpDate = snp_date[sp + dayPlus]\r\n                        var snpDate_sf = sf.parse(snpDate) // 기준 일자 (SNP 날짜)\r\n\r\n                        var fundDate = fund_date[fundIndex]\r\n                        var fundDate_sf = sf.parse(fundDate)\r\n                        var bondDate = bond_date[bondIndex]\r\n                        var bondDate_sf = sf.parse(bondDate)\r\n                        var indproDate = indpro_date[indproIndex]\r\n                        var indproDate_sf = sf.parse(indproDate)\r\n                        var unemDate = unem_date[unemIndex]\r\n                        var unemDate_sf = sf.parse(unemDate)\r\n                        var infDate = inf_date[infIndex]\r\n                        var infDate_sf = sf.parse(infDate)\r\n\r\n                        var fund_c = snpDate_sf.time - fundDate_sf.time\r\n                        var bond_c = snpDate_sf.time - bondDate_sf.time\r\n                        var indpro_c = snpDate_sf.time - indproDate_sf.time\r\n                        var unem_c = snpDate_sf.time - unemDate_sf.time\r\n                        var inf_c = snpDate_sf.time - infDate_sf.time\r\n\r\n\r\n                        snpD.addEntry(Entry(dayPlus.toFloat(), snp_val[sp + dayPlus].toFloat()), 0)\r\n\r\n                        while (fund_c > 0) {\r\n                            fundIndex += 1\r\n                            fundDate = fund_date[fundIndex]\r\n                            fundDate_sf = sf.parse(fundDate)\r\n                            fund_c = snpDate_sf.time - fundDate_sf.time\r\n                        }\r\n                        fundCount += 1\r\n                        fundD.addEntry(\r\n                            Entry(\r\n                                (fundCount - 1250).toFloat(),\r\n                                fund_val[fundIndex].toFloat()\r\n                            ), 0\r\n                        )\r\n                        println(\"fund date : $fundDate\")\r\n\r\n                        while (bond_c > 0) {\r\n                            bondIndex += 1\r\n                            bondDate = bond_date[bondIndex]\r\n                            bondDate_sf = sf.parse(bondDate)\r\n                            bond_c = snpDate_sf.time - bondDate_sf.time\r\n                        }\r\n                        bondCount += 1\r\n                        bondD.addEntry(\r\n                            Entry(\r\n                                (bondCount - 1250).toFloat(),\r\n                                bond_val[bondIndex].toFloat()\r\n                            ), 0\r\n                        )\r\n\r\n                        while (indpro_c > 0) {\r\n                            indproIndex += 1\r\n                            indproDate = indpro_date[indproIndex]\r\n                            indproDate_sf = sf.parse(indproDate)\r\n                            indpro_c = snpDate_sf.time - indproDate_sf.time\r\n                        }\r\n                        indproCount += 1\r\n                        indproD.addEntry(\r\n                            Entry(\r\n                                (indproCount - 1250).toFloat(),\r\n                                indpro_val[indproIndex - 1].toFloat()\r\n                            ), 0\r\n                        )\r\n\r\n                        while (unem_c > 0) {\r\n                            unemIndex += 1\r\n                            unemDate = unem_date[unemIndex]\r\n                            unemDate_sf = sf.parse(unemDate)\r\n                            unem_c = snpDate_sf.time - indproDate_sf.time\r\n                        }\r\n                        unemCount += 1\r\n                        unemD.addEntry(\r\n                            Entry(\r\n                                (unemCount - 1250).toFloat(),\r\n                                unem_val[unemIndex - 1].toFloat()\r\n                            ), 0\r\n                        )\r\n\r\n                        while (inf_c > 0) {\r\n                            infIndex += 1\r\n                            infDate = inf_date[infIndex]\r\n                            infDate_sf = sf.parse(infDate)\r\n                            inf_c = snpDate_sf.time - infDate_sf.time\r\n                        }\r\n                        infCount += 1\r\n                        infD.addEntry(\r\n                            Entry(\r\n                                (infCount - 1250).toFloat(),\r\n                                inf_val[infIndex - 1].toFloat()\r\n                            ), 0\r\n                        )\r\n\r\n                        println(\"S&P : \" + snp_date[sp + dayPlus] + \" | \" + \"Fund : \" + fund_date[fundIndex] + \" | \" + \"Bond : \" + bond_date[bondIndex] + \" | \" + \"IndPro : \" + indpro_date[indproIndex - 1] + \" | \" + \"UnEm : \" + unem_date[unemIndex - 1] + \" | \" + \"Inf : \" + inf_date[infIndex - 1])\r\n\r\n                        //\r\n                        findViewById<LineChart>(R.id.cht_snp).notifyDataSetChanged()\r\n                        findViewById<LineChart>(R.id.cht_fund).notifyDataSetChanged()\r\n                        findViewById<LineChart>(R.id.cht_bond).notifyDataSetChanged()\r\n                        findViewById<LineChart>(R.id.cht_indpro).notifyDataSetChanged()\r\n                        findViewById<LineChart>(R.id.cht_unem).notifyDataSetChanged()\r\n                        findViewById<LineChart>(R.id.cht_inf).notifyDataSetChanged()\r\n\r\n                        snpD.notifyDataChanged()\r\n                        fundD.notifyDataChanged()\r\n                        bondD.notifyDataChanged()\r\n                        unemD.notifyDataChanged()\r\n                        infD.notifyDataChanged()\r\n\r\n                        findViewById<LineChart>(R.id.cht_snp).setVisibleXRangeMaximum(125F) // X축 범위: 125 거래일(~6개월)\r\n\r\n                        findViewById<LineChart>(R.id.cht_snp).moveViewToX(dayPlus.toFloat())\r\n                        findViewById<LineChart>(R.id.cht_fund).moveViewToX(dayPlus.toFloat())\r\n                        findViewById<LineChart>(R.id.cht_bond).moveViewToX(dayPlus.toFloat())\r\n                        findViewById<LineChart>(R.id.cht_indpro).moveViewToX(dayPlus.toFloat())\r\n                        findViewById<LineChart>(R.id.cht_unem).moveViewToX(dayPlus.toFloat())\r\n                        findViewById<LineChart>(R.id.cht_inf).moveViewToX(dayPlus.toFloat())\r\n\r\n\r\n                        // 현재 값 저장\r\n                        snpNowDate = snp_date[sp + dayPlus]\r\n                        snpNowdays = dayPlus\r\n                        snpNowVal = snp_val[sp + dayPlus].toFloat()\r\n                        println(\"현재 날짜 : $snpNowDate | 현재 경과 거래일 : $snpNowdays | 현재 S&P 500 지수 값 : $snpNowVal\")\r\n\r\n\r\n                        dayPlus += 1 // 시간 진행\r\n                    } else {\r\n                        println(\"게임 끝\")\r\n                        break\r\n                    }\r\n                } else {\r\n                    delay(btnRefresh)\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n            delay(btnRefresh)\r\n        }\r\n    }\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/GameNormalActivity.kt	(revision 184d1428f0a433af577a4e8281776ee960b21e67)
+++ app/src/main/java/com/example/myapplication/GameNormalActivity.kt	(date 1612415735687)
@@ -284,12 +284,10 @@
         auto_btn.setOnClickListener {
             val layoutInflater: LayoutInflater = getLayoutInflater()
             val builder = AlertDialog.Builder(this)
-//            val u_id = " "
-//            val u_pw = " "
-//            val u_date = " "
-//            getRoomListDataHttp(u_id, u_pw, u_date)
+
             getRoomListDataHttp()
             click = !click /////////////////////////////////////////////////////////////////////////
+
         }
 
         val item_btn = findViewById<Button>(R.id.item_btn)
Index: app/src/main/java/com/example/myapplication/InitialActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication\r\n\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.ImageButton\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.example.myapplication.data.Profile\r\nimport com.example.myapplication.data.ProflieDB\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInClient\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.gms.common.SignInButton\r\nimport com.google.android.gms.common.api.ApiException\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.GoogleAuthProvider\r\nimport com.google.gson.Gson\r\nimport com.google.gson.GsonBuilder\r\nimport com.kakao.sdk.auth.LoginClient\r\nimport com.kakao.sdk.auth.model.OAuthToken\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\n\r\n\r\nclass InitialActivity : AppCompatActivity() {\r\n    // profileDb\r\n    private var profileDb : ProflieDB? = null\r\n\r\n    // google signin\r\n    var auth: FirebaseAuth? = null\r\n    val GOOGLE_REQUEST_CODE = 99\r\n    val TAG = \"googleLogin\"\r\n    private lateinit var googleSignInClient: GoogleSignInClient\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private lateinit var btn_googleSignIn : SignInButton\r\n    private lateinit var btn_generalSignup : Button\r\n    private lateinit var btn_generalLogin : Button\r\n    private lateinit var btn_kakaoLogin : ImageButton\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_initial)\r\n\r\n        btn_googleSignIn = findViewById(R.id.btn_googleSignIn)\r\n        btn_generalSignup = findViewById(R.id.btn_generalsignup)\r\n        btn_generalLogin = findViewById(R.id.btn_generalLogin)\r\n        btn_kakaoLogin = findViewById(R.id.btn_kakaoLogin)\r\n\r\n\r\n        // 회원가입 & onClickListner\r\n        btn_generalSignup.setOnClickListener{\r\n            val id1: TextView = findViewById(R.id.et_id)\r\n            val pw1: TextView = findViewById(R.id.et_pw)\r\n            val time1: LocalDateTime = LocalDateTime.now()\r\n            val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")\r\n            val formatted = time1.format(formatter)\r\n            val loginID: String = id1.text.toString().trim()\r\n            val loginPW: String = pw1.text.toString().trim()\r\n            val loginDate : String = formatted.toString().trim()\r\n            generalSignup(loginID, loginPW, loginDate)\r\n        }\r\n\r\n        // 로그인 & onClickListner\r\n        btn_generalLogin.setOnClickListener{\r\n            val id1: TextView = findViewById(R.id.et_id)\r\n            val pw1: TextView = findViewById(R.id.et_pw)\r\n            val time1: LocalDateTime = LocalDateTime.now()\r\n            val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")\r\n            val formatted = time1.format(formatter)\r\n            val loginID: String = id1.text.toString().trim()\r\n            val loginPW: String = pw1.text.toString().trim()\r\n            val loginDate : String = formatted.toString().trim()\r\n            generalLoginCheck(loginID, loginPW, loginDate)\r\n        }\r\n\r\n        // google Sign in & onClickListner\r\n        auth = FirebaseAuth.getInstance()\r\n        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(getString(R.string.default_web_client_id))\r\n            .requestEmail()\r\n            .build()\r\n        googleSignInClient = GoogleSignIn.getClient(this,gso)\r\n\r\n        btn_googleSignIn.setOnClickListener {\r\n            googleSignIn()\r\n        }\r\n\r\n        // kakao login & onClickListner\r\n        btn_kakaoLogin.setOnClickListener(View.OnClickListener {\r\n            // 로그인 공통 callback 구성\r\n            val callback: (OAuthToken?, Throwable?) -> Unit = { token, error ->\r\n                if (error != null) {\r\n                    Log.e(TAG, \"로그인 실패\", error)\r\n                }\r\n                else if (token != null) {\r\n                    Log.i(TAG, \"로그인 성공 ${token.accessToken}\")\r\n                    loginSuccess(\"KAKAO\") // memorize login method and move to MainActivity\r\n                }\r\n            }\r\n            // 카카오톡이 설치되어 있으면 카카오톡으로 로그인, 아니면 카카오계정으로 로그인\r\n            if (LoginClient.instance.isKakaoTalkLoginAvailable(this)) {\r\n                LoginClient.instance.loginWithKakaoTalk(this, callback = callback)\r\n            } else {\r\n                LoginClient.instance.loginWithKakaoAccount(this, callback = callback)\r\n            }\r\n        })\r\n    }\r\n\r\n    // general signup\r\n    fun generalSignup(u_id: String, u_pw: String, u_date : String) {\r\n        var api_signup: Retrofitsignup? = null\r\n        val url = \"http://stockgame.dothome.co.kr/test/Signup.php/\"\r\n        var gson: Gson = GsonBuilder()\r\n            .setLenient()\r\n            .create()\r\n        //creating retrofit object\r\n        var retrofit =\r\n            Retrofit.Builder()\r\n                .baseUrl(url)\r\n                .addConverterFactory(GsonConverterFactory.create(gson))\r\n                .build()\r\n        //creating our api\r\n        api_signup = retrofit.create(Retrofitsignup::class.java)\r\n        api_signup.retro_signup(u_id, u_pw, u_date).enqueue(object : Callback<String> {\r\n            override fun onFailure(call: Call<String>, t: Throwable) {\r\n                Toast.makeText(this@InitialActivity, t.message, Toast.LENGTH_LONG).show()\r\n            }\r\n            override fun onResponse(call: Call<String>, response: retrofit2.Response<String>) {\r\n                val code: String = response.body()!!\r\n                if(code == \"444\"){\r\n                    Toast.makeText(this@InitialActivity, \"공백 아이디는 불가합니다.\", Toast.LENGTH_LONG).show()\r\n                }\r\n                if(code == \"555\"){\r\n                    Toast.makeText(this@InitialActivity, \"이미 등록된 아이디입니다.\", Toast.LENGTH_LONG).show()\r\n                }\r\n                if(code == \"666\"){\r\n                    Toast.makeText(this@InitialActivity, \"회원가입이 완료되었습니다!\", Toast.LENGTH_LONG).show()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // general login\r\n    fun generalLoginCheck(u_id: String, u_pw: String, u_date: String) {\r\n        var funlogincheck: Retrofitlogincheck? = null\r\n        val url = \"http://stockgame.dothome.co.kr/test/logincheck.php/\"\r\n        var gson: Gson = GsonBuilder()\r\n            .setLenient()\r\n            .create()\r\n        //creating retrofit object\r\n        var retrofit =\r\n            Retrofit.Builder()\r\n                .baseUrl(url)\r\n                .addConverterFactory(GsonConverterFactory.create(gson))\r\n                .build()\r\n        //creating our api\r\n        funlogincheck= retrofit.create(Retrofitlogincheck::class.java)\r\n        funlogincheck.post_logincheck(u_id, u_pw, u_date).enqueue(object : Callback<String> {\r\n            override fun onFailure(call: Call<String>, t: Throwable) {\r\n                Toast.makeText(this@InitialActivity, \"아이디나 비밀번호가 맞지 않습니다.\", Toast.LENGTH_LONG).show()\r\n            }\r\n            override fun onResponse(call: Call<String>, response: retrofit2.Response<String>) {\r\n                if (response.isSuccessful && response.body() != null) {\r\n                    val okcode: String = response.body()!!\r\n                    if (okcode == \"777\"){\r\n                        Toast.makeText(this@InitialActivity, \"로그인 성공!\", Toast.LENGTH_LONG).show()\r\n                        loginSuccess(\"GENERAL\") // memorize login method and move to MainActivity\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // google Sign In\r\n    private fun googleSignIn() {\r\n        val signInIntent = googleSignInClient.signInIntent\r\n        startActivityForResult(signInIntent, GOOGLE_REQUEST_CODE)\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);\r\n        if (requestCode == GOOGLE_REQUEST_CODE) {\r\n            val task = GoogleSignIn.getSignedInAccountFromIntent(data)\r\n            try {\r\n                // Google Sign In was successful, authenticate with Firebase\r\n                val account = task.getResult(ApiException::class.java)!!\r\n                Log.d(TAG, \"firebaseAuthWithGoogle:\" + account.id)\r\n                firebaseAuthWithGoogle(account.idToken!!)\r\n            } catch (e: ApiException) {\r\n                // Google Sign In failed, update UI appropriately\r\n                Log.w(TAG, \"Google sign in failed\", e)\r\n                Toast.makeText(this, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun firebaseAuthWithGoogle(idToken: String) {\r\n        val credential = GoogleAuthProvider.getCredential(idToken, null)\r\n        auth?.signInWithCredential(credential)\r\n            ?.addOnCompleteListener(this) { task ->\r\n                if (task.isSuccessful) {\r\n                    // Sign in success, update UI with the signed-in user's information\r\n                    Log.d(TAG, \"로그인 성공\")\r\n                    val user = auth!!.currentUser\r\n                    loginSuccess(\"GOOGLE\") // memorize login method and move to MainActivity\r\n                } else {\r\n                    // If sign in fails, display a message to the user.\r\n                    Log.w(TAG, \"signInWithCredential:failure\", task.exception)\r\n                }\r\n            }\r\n    }\r\n\r\n    private fun loginSuccess(method: String){\r\n        memorizeLogMethod(method)\r\n        if(profileDb?.profileDao()?.getNickname()==\"#########first_login##########\"){\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n        } else {\r\n            val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n        finish()\r\n    }\r\n\r\n    // remember which login method did user used with DB\r\n    private fun memorizeLogMethod(method : String){\r\n        profileDb = ProflieDB?.getInstace(this)\r\n        // if profile DB is empty insert dummy\r\n        if(profileDb?.profileDao()?.getAll().isNullOrEmpty()){\r\n            val setRunnable = Runnable {\r\n                val newProfile = Profile(1, \"#########first_login##########\", 0, \"\", 1, 0)\r\n                profileDb?.profileDao()?.insert(newProfile)\r\n            }\r\n            var setThread = Thread(setRunnable)\r\n            setThread.start()\r\n        }\r\n        // save which login method user have used\r\n        profileDb = ProflieDB?.getInstace(this)\r\n        var temp = profileDb?.profileDao()?.getLogin()\r\n        if(method==\"GENERAL\")   temp = temp?.or(1)\r\n        else if(method==\"GOOGLE\")   temp = temp?.or(2)\r\n        else if(method==\"KAKAO\")    temp = temp?.or(4)\r\n        // update the login method to DB\r\n        val setRunnable = Runnable {\r\n            val newProfile = Profile()\r\n            newProfile.id = profileDb?.profileDao()?.getId()?.toLong()\r\n            newProfile.nickname = profileDb?.profileDao()?.getNickname()!!\r\n            newProfile.history = profileDb?.profileDao()?.getHistory()!!\r\n            newProfile.level = profileDb?.profileDao()?.getLevel()!!\r\n            newProfile.login = temp!!\r\n            newProfile.profit = profileDb?.profileDao()?.getProfit()!!\r\n            profileDb?.profileDao()?.update(newProfile)\r\n        }\r\n        var setThread = Thread(setRunnable)\r\n        setThread.start()\r\n    }\r\n\r\n    // 두번 누르면 종료되는 코드\r\n    var time3: Long = 0\r\n    override fun onBackPressed() {\r\n        val time1 = System.currentTimeMillis()\r\n        val time2 = time1 - time3\r\n        if (time2 in 0..2000) {\r\n            // 이거 3줄 다 써야 안전하게 종료\r\n            moveTaskToBack(true)\r\n            finish()\r\n            android.os.Process.killProcess(android.os.Process.myPid())\r\n        }\r\n        else {\r\n            time3 = time1\r\n            Toast.makeText(applicationContext, \"한번 더 누르시면 종료됩니다.\",Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/InitialActivity.kt	(revision 184d1428f0a433af577a4e8281776ee960b21e67)
+++ app/src/main/java/com/example/myapplication/InitialActivity.kt	(date 1612420620026)
@@ -24,6 +24,10 @@
 import com.google.gson.GsonBuilder
 import com.kakao.sdk.auth.LoginClient
 import com.kakao.sdk.auth.model.OAuthToken
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers.Main
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.launch
 import retrofit2.Call
 import retrofit2.Callback
 import retrofit2.Retrofit
@@ -70,6 +74,9 @@
             val loginPW: String = pw1.text.toString().trim()
             val loginDate : String = formatted.toString().trim()
             generalSignup(loginID, loginPW, loginDate)
+//            val dlg_loading = Dialog_loading(this)
+//            dlg_loading.start()
+
         }
 
         // 로그인 & onClickListner
@@ -95,6 +102,7 @@
 
         btn_googleSignIn.setOnClickListener {
             googleSignIn()
+
         }
 
         // kakao login & onClickListner
@@ -115,6 +123,7 @@
             } else {
                 LoginClient.instance.loginWithKakaoAccount(this, callback = callback)
             }
+            showLoadingDialog()
         })
     }
 
@@ -210,6 +219,7 @@
 
     private fun firebaseAuthWithGoogle(idToken: String) {
         val credential = GoogleAuthProvider.getCredential(idToken, null)
+        showLoadingDialog()
         auth?.signInWithCredential(credential)
             ?.addOnCompleteListener(this) { task ->
                 if (task.isSuccessful) {
@@ -226,6 +236,7 @@
 
     private fun loginSuccess(method: String){
         memorizeLogMethod(method)
+        delLoadingDialog()
         if(profileDb?.profileDao()?.getNickname()=="#########first_login##########"){
             val intent = Intent(this, ProfileActivity::class.java)
             startActivity(intent)
@@ -285,5 +296,23 @@
             Toast.makeText(applicationContext, "한번 더 누르시면 종료됩니다.",Toast.LENGTH_SHORT).show()
         }
     }
+    // 로딩 창 띄우는 코드
+    private fun showLoadingDialog() {
+        val dialog = Dialog_loading(this@InitialActivity)
+        CoroutineScope(Main).launch {
+            dialog.start()
+        }
+    }
+    private fun delLoadingDialog() {
+        val dialog = Dialog_loading(this@InitialActivity)
+        CoroutineScope(Main).launch {
+            dialog.finish()
+        }
+    }
+//    override fun onDestroy() {
+//        Log.d(TAG, "called onDestroy");
+//        delLoadingDialog()
+//        super.onDestroy();
+//    }
 }
 
Index: app/src/main/res/layout/dialog_loading.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/dialog_loading.xml	(date 1612414238626)
+++ app/src/main/res/layout/dialog_loading.xml	(date 1612414238626)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:background="@color/white"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content">
+
+    <ProgressBar android:layout_width="wrap_content" android:layout_height="wrap_content"
+        app:layout_constraintTop_toTopOf="parent" app:layout_constraintStart_toStartOf="parent"
+        style="?android:attr/progressBarStyleSmall"
+        app:layout_constraintBottom_toBottomOf="parent" android:layout_marginTop="20dp"
+        android:layout_marginStart="20dp" android:layout_marginBottom="20dp" android:id="@+id/progressBar2"/>
+    <TextView
+        android:text="처리 중..."
+        android:layout_width="wrap_content"
+        android:textSize="12dp"
+        android:layout_height="wrap_content"
+        android:gravity="center"
+        app:layout_constraintTop_toTopOf="@+id/progressBar2"
+        app:layout_constraintBottom_toBottomOf="@+id/progressBar2"
+        app:layout_constraintStart_toEndOf="@+id/progressBar2" android:layout_marginStart="20dp"
+        app:layout_constraintEnd_toEndOf="parent" android:layout_marginEnd="20dp"
+        android:textColor="@android:color/black"/>
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/myapplication/Dialog_loading.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/Dialog_loading.kt	(date 1612416164113)
+++ app/src/main/java/com/example/myapplication/Dialog_loading.kt	(date 1612416164113)
@@ -0,0 +1,21 @@
+package com.example.myapplication
+
+import android.app.Dialog
+import android.content.Context
+import android.view.Window
+
+class Dialog_loading(context : Context){
+    var mContext: Context? = context
+
+    val dlg = Dialog(context)   //부모 액티비티의 context 가 들어감
+    fun start() {
+        dlg.setContentView(R.layout.dialog_loading)     //다이얼로그에 사용할 xml 파일을 불러옴
+        //dlg.supportRequestWindowFeature(Window.FEATURE_NO_TITLE)
+        dlg.setCancelable(false)    //다이얼로그의 바깥 화면을 눌렀을 때 다이얼로그가 닫히지 않도록
+        dlg.show()
+    }
+    fun finish(){
+        dlg.dismiss()
+    }
+
+}
\ No newline at end of file
