Index: app/src/main/java/com/example/myapplication/ProfileActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.lifecycle.LifecycleOwner\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.example.myapplication.Dialog_nick\r\nimport com.example.myapplication.data.Profile\r\nimport com.example.myapplication.data.ProflieDB\r\n\r\nclass ProfileActivity : AppCompatActivity() {\r\n    //receive profile room data\r\n    private var profileDb: ProflieDB? = null\r\n    private var profileList = mutableListOf<Profile>()\r\n    private lateinit var nickname_textView: TextView\r\n    private lateinit var accountManagement_btn: Button\r\n    private lateinit var nickname_btn: Button\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_profile)\r\n\r\n        profileDb = ProflieDB.getInstace(this)\r\n\r\n        nickname_textView = findViewById(R.id.nickName_text)\r\n        nickname_btn = findViewById(R.id.nickname_btn)\r\n        accountManagement_btn = findViewById(R.id.accountManagement_btn)\r\n        val history_btn = findViewById<Button>(R.id.history_btn)\r\n        val viewModel = ViewModelProvider(this, ViewModelProvider.NewInstanceFactory()).get(ProfileActivityViewModel::class.java)\r\n        lateinit var changenick: String\r\n        var count:Int = 0\r\n\r\n\r\n        viewModel.nickname().observe(this, Observer {\r\n            nickname_textView.text = it\r\n        })\r\n        val startRunnable = Runnable {\r\n            profileList = profileDb?.profileDao()?.getAll()!!\r\n        }\r\n\r\n        if (profileDb?.profileDao()?.getNickname()==\"#########first_login##########\") { // PreSet the setting in the case of first running\r\n            nickname_textView.text = \"닉네임을 정하세요.\"\r\n            // preinsert profile for call_dialog_nick which just update the database\r\n            viewModel.initialize(\"닉네임을 정하세요.\")\r\n            // update nickname\r\n            viewModel.nicknameChange(\"닉네임을 정하세요.\")\r\n            val dlg_nick = Dialog_nick(this)\r\n            profileDb = ProflieDB.getInstace(this)\r\n            dlg_nick.start(profileDb)\r\n            dlg_nick.setOnNicknameClickedListener { content->\r\n                changenick=content\r\n                viewModel.nicknameChange(changenick)\r\n            }\r\n//            count=count+1\r\n        } else  { // recall database\r\n            viewModel.initialize(profileDb?.profileDao()?.getNickname().toString())\r\n//            count=count+1\r\n        }\r\n\r\n        val startThread = Thread(startRunnable)\r\n        startThread.start()\r\n\r\n        nickname_btn.setOnClickListener {\r\n            val dlg_nick = Dialog_nick(this)\r\n            dlg_nick.start(profileDb)\r\n            dlg_nick.setOnNicknameClickedListener { content->\r\n                changenick=content\r\n                viewModel.nicknameChange(changenick)\r\n            }\r\n        }\r\n\r\n        accountManagement_btn.setOnClickListener {\r\n            val intent = Intent(this, AccountManagementActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        history_btn.setOnClickListener{\r\n            val intent = Intent(this, GameHistoryActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/ProfileActivity.kt	(revision 50ba8d6365422cc57d5764af5117756a33874c1c)
+++ app/src/main/java/com/example/myapplication/ProfileActivity.kt	(date 1612441855839)
@@ -29,7 +29,6 @@
         setContentView(R.layout.activity_profile)
 
         profileDb = ProflieDB.getInstace(this)
-
         nickname_textView = findViewById(R.id.nickName_text)
         nickname_btn = findViewById(R.id.nickname_btn)
         accountManagement_btn = findViewById(R.id.accountManagement_btn)
@@ -43,7 +42,11 @@
             nickname_textView.text = it
         })
         val startRunnable = Runnable {
+            val newProfile = Profile()
+           // newProfile.login_id = "b"
+            profileDb?.profileDao()?.update(newProfile)
             profileList = profileDb?.profileDao()?.getAll()!!
+
         }
 
         if (profileDb?.profileDao()?.getNickname()=="#########first_login##########") { // PreSet the setting in the case of first running
@@ -54,6 +57,7 @@
             viewModel.nicknameChange("닉네임을 정하세요.")
             val dlg_nick = Dialog_nick(this)
             profileDb = ProflieDB.getInstace(this)
+
             dlg_nick.start(profileDb)
             dlg_nick.setOnNicknameClickedListener { content->
                 changenick=content
@@ -63,11 +67,11 @@
         } else  { // recall database
             viewModel.initialize(profileDb?.profileDao()?.getNickname().toString())
 //            count=count+1
+
         }
 
         val startThread = Thread(startRunnable)
         startThread.start()
-
         nickname_btn.setOnClickListener {
             val dlg_nick = Dialog_nick(this)
             dlg_nick.start(profileDb)
@@ -78,6 +82,7 @@
         }
 
         accountManagement_btn.setOnClickListener {
+            profileDb = ProflieDB.getInstace(this@ProfileActivity)
             val intent = Intent(this, AccountManagementActivity::class.java)
             startActivity(intent)
         }
Index: app/src/main/java/com/example/myapplication/AccountManagementActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication\r\n\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.*\r\nimport com.bumptech.glide.Glide\r\nimport com.example.myapplication.data.Profile\r\nimport com.example.myapplication.data.ProflieDB\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.kakao.sdk.user.UserApiClient\r\n\r\nclass AccountManagementActivity : AppCompatActivity() {\r\n    //receive profile room data\r\n    private var profileDb: ProflieDB? = null\r\n    private lateinit var googleAuth : FirebaseAuth\r\n    private lateinit var layout_generalAccountManagement : LinearLayout\r\n    private lateinit var layout_googleAccountManagement : LinearLayout\r\n    private lateinit var layout_kakaoAccountManagement : LinearLayout\r\n    private lateinit var imageView_generalAccountProfile : ImageView\r\n    private lateinit var imageView_googleAccountProfile : ImageView\r\n    private lateinit var imageView_kakaoAccountProfile : ImageView\r\n    private lateinit var textView_generalAcountID : TextView\r\n    private lateinit var textView_googleAcountID : TextView\r\n    private lateinit var textView_kakaoAcountID : TextView\r\n    private lateinit var btn_generalAcountID : Button\r\n    private lateinit var textView_generalAcountEmail : TextView\r\n    private lateinit var textView_googleAcountEmail : TextView\r\n    private lateinit var textView_kakaoAcountEmail : TextView\r\n    private lateinit var btn_generalAcountEmail : Button\r\n    private lateinit var btn_generalAcountPW : Button\r\n    private lateinit var btn_googleAcountSignOut : Button\r\n    private lateinit var btn_kakaoAcountDelete : Button\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_account_management)\r\n\r\n        layout_generalAccountManagement = findViewById(R.id.layout_generalAccountManagement)\r\n        imageView_generalAccountProfile = findViewById(R.id.imageView_generalAccountProfile)\r\n        textView_generalAcountID = findViewById(R.id.editText_generalAcountID)\r\n        btn_generalAcountID = findViewById(R.id.btn_generalAccountID)\r\n        textView_generalAcountEmail = findViewById(R.id.editText_generalAcountEmail)\r\n        btn_generalAcountEmail = findViewById(R.id.btn_generalAcountEmail)\r\n        btn_generalAcountPW = findViewById(R.id.btn_generalAccountPW)\r\n\r\n        layout_googleAccountManagement = findViewById(R.id.layout_googleAccountManagement)\r\n        imageView_googleAccountProfile = findViewById(R.id.imageView_googleAccountProfile)\r\n        textView_googleAcountID = findViewById(R.id.editText_googleAcountID)\r\n        textView_googleAcountEmail = findViewById(R.id.editText_googleAcountEmail)\r\n        btn_googleAcountSignOut = findViewById(R.id.btn_googleAccountSignOut)\r\n\r\n        layout_kakaoAccountManagement = findViewById(R.id.layout_kakaoAccountManagement)\r\n        imageView_kakaoAccountProfile = findViewById(R.id.imageView_kakaoAccountProfile)\r\n        textView_kakaoAcountID = findViewById(R.id.editText_kakaoAcountID)\r\n        textView_kakaoAcountEmail = findViewById(R.id.editText_kakaoAcountEmail)\r\n        btn_kakaoAcountDelete = findViewById(R.id.btn_kakaoAccountDelete)\r\n\r\n        // 현재 로그인된 계정만 띄우기\r\n        profileDb = ProflieDB?.getInstace(this)\r\n        if(profileDb?.profileDao()?.getAll().isNullOrEmpty()) {\r\n            Toast.makeText(this, \"there is no profile in DB\", Toast.LENGTH_SHORT).show()\r\n            layout_generalAccountManagement.visibility = View.GONE\r\n            layout_googleAccountManagement.visibility = View.GONE\r\n            layout_kakaoAccountManagement.visibility = View.GONE\r\n        }\r\n        else{\r\n            var loginMethod = profileDb?.profileDao()?.getLogin()\r\n            if(loginMethod?.and(1)==1) layout_generalAccountManagement.visibility = View.VISIBLE\r\n            else layout_generalAccountManagement.visibility = View.GONE\r\n            if(loginMethod?.and(2)==2) {\r\n                layout_googleAccountManagement.visibility = View.VISIBLE\r\n                googleAuth = FirebaseAuth.getInstance()\r\n                val currUser = googleAuth.currentUser\r\n                textView_googleAcountID.text = currUser?.uid\r\n                textView_googleAcountEmail.text = currUser?.email\r\n                Glide.with(this).load(currUser?.photoUrl).into(imageView_googleAccountProfile)\r\n            }\r\n            else layout_googleAccountManagement.visibility = View.GONE\r\n            if(loginMethod?.and(4)==4) {\r\n                layout_kakaoAccountManagement.visibility = View.VISIBLE\r\n                UserApiClient.instance.me { user, error ->\r\n                    if (error!=null)\r\n                        Toast.makeText(this,\"사용자 정보 요청 실패(카카오)\",Toast.LENGTH_SHORT)\r\n                    else if (user!=null) {\r\n                        textView_kakaoAcountID.text = user?.id.toString() + user?.kakaoAccount?.profile?.nickname\r\n                        textView_kakaoAcountEmail.text = user?.kakaoAccount?.email\r\n                        Glide.with(this).load(user?.kakaoAccount?.profile?.thumbnailImageUrl).into(imageView_kakaoAccountProfile)\r\n                    }\r\n                }\r\n            }\r\n            else layout_kakaoAccountManagement.visibility = View.GONE\r\n        }\r\n\r\n        btn_googleAcountSignOut.setOnClickListener {\r\n            googleAuth = FirebaseAuth.getInstance()\r\n            googleAuth.signOut()\r\n            updatelogOutInFo2DB(\"GOOGLE\")\r\n            val intent = Intent(this,InitialActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        btn_kakaoAcountDelete.setOnClickListener {\r\n            UserApiClient.instance.logout { error ->\r\n                if (error != null) {\r\n                    Log.e(\"KAKAO LOGOUT\", \"로그아웃 실패. SDK에서 토큰 삭제됨\", error)\r\n                }\r\n                else {\r\n                    Log.i(\"KAKAO LOGOUT\", \"로그아웃 성공. SDK에서 토큰 삭제됨\")\r\n                }\r\n            }\r\n            updatelogOutInFo2DB(\"KAKAO\")\r\n            val intent = Intent(this,InitialActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    private fun updatelogOutInFo2DB(method : String){\r\n        var mask : Int = 0\r\n        if (method==\"GENERAL\") mask = 1\r\n        else if(method==\"GOOGLE\") mask = 2\r\n        else if(method==\"KAKAO\") mask = 4\r\n\r\n        profileDb = ProflieDB?.getInstace(this)\r\n        if(!profileDb?.profileDao()?.getAll().isNullOrEmpty()) {\r\n            val setRunnable = Runnable {\r\n                val newProfile = Profile()\r\n                newProfile.id = profileDb?.profileDao()?.getId()?.toLong()\r\n                newProfile.nickname = profileDb?.profileDao()?.getNickname()!!\r\n                newProfile.history = profileDb?.profileDao()?.getHistory()!!\r\n                newProfile.level = profileDb?.profileDao()?.getLevel()!!\r\n                newProfile.login = profileDb?.profileDao()?.getLogin()!!-mask\r\n                newProfile.profit = profileDb?.profileDao()?.getProfit()!!\r\n                profileDb?.profileDao()?.update(newProfile)\r\n            }\r\n            var setThread = Thread(setRunnable)\r\n            setThread.start()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/AccountManagementActivity.kt	(revision 50ba8d6365422cc57d5764af5117756a33874c1c)
+++ app/src/main/java/com/example/myapplication/AccountManagementActivity.kt	(date 1612442162459)
@@ -34,8 +34,10 @@
     private lateinit var btn_googleAcountSignOut : Button
     private lateinit var btn_kakaoAcountDelete : Button
 
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
+
         setContentView(R.layout.activity_account_management)
 
         layout_generalAccountManagement = findViewById(R.id.layout_generalAccountManagement)
@@ -59,7 +61,7 @@
         btn_kakaoAcountDelete = findViewById(R.id.btn_kakaoAccountDelete)
 
         // 현재 로그인된 계정만 띄우기
-        profileDb = ProflieDB?.getInstace(this)
+        profileDb = ProflieDB.getInstace(this)
         if(profileDb?.profileDao()?.getAll().isNullOrEmpty()) {
             Toast.makeText(this, "there is no profile in DB", Toast.LENGTH_SHORT).show()
             layout_generalAccountManagement.visibility = View.GONE
@@ -68,7 +70,11 @@
         }
         else{
             var loginMethod = profileDb?.profileDao()?.getLogin()
-            if(loginMethod?.and(1)==1) layout_generalAccountManagement.visibility = View.VISIBLE
+            if(loginMethod?.and(1)==1){
+                layout_generalAccountManagement.visibility = View.VISIBLE
+                textView_generalAcountID.text = profileDb?.profileDao()?.getLoginid()
+            }
+
             else layout_generalAccountManagement.visibility = View.GONE
             if(loginMethod?.and(2)==2) {
                 layout_googleAccountManagement.visibility = View.VISIBLE
@@ -115,14 +121,14 @@
             val intent = Intent(this,InitialActivity::class.java)
             startActivity(intent)
         }
+        // 일반 로그인 시 비밀번호 변경
+        btn_generalAcountPW.setOnClickListener{
+            val dlg_change_pw = Dialog_change_pw(this)
+            dlg_change_pw.start()
+        }
     }
 
     private fun updatelogOutInFo2DB(method : String){
-        var mask : Int = 0
-        if (method=="GENERAL") mask = 1
-        else if(method=="GOOGLE") mask = 2
-        else if(method=="KAKAO") mask = 4
-
         profileDb = ProflieDB?.getInstace(this)
         if(!profileDb?.profileDao()?.getAll().isNullOrEmpty()) {
             val setRunnable = Runnable {
@@ -131,8 +137,10 @@
                 newProfile.nickname = profileDb?.profileDao()?.getNickname()!!
                 newProfile.history = profileDb?.profileDao()?.getHistory()!!
                 newProfile.level = profileDb?.profileDao()?.getLevel()!!
-                newProfile.login = profileDb?.profileDao()?.getLogin()!!-mask
+                newProfile.login = profileDb?.profileDao()?.getLogin()!!
                 newProfile.profit = profileDb?.profileDao()?.getProfit()!!
+                newProfile.login_id = profileDb?.profileDao()?.getLoginid()!!
+                newProfile.login_pw = profileDb?.profileDao()?.getLoginpw()!!
                 profileDb?.profileDao()?.update(newProfile)
             }
             var setThread = Thread(setRunnable)
Index: app/src/main/java/com/example/myapplication/InitialActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication\r\n\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.ImageButton\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.example.myapplication.data.Profile\r\nimport com.example.myapplication.data.ProflieDB\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInClient\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.gms.common.SignInButton\r\nimport com.google.android.gms.common.api.ApiException\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.GoogleAuthProvider\r\nimport com.google.gson.Gson\r\nimport com.google.gson.GsonBuilder\r\nimport com.kakao.sdk.auth.LoginClient\r\nimport com.kakao.sdk.auth.model.OAuthToken\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers.Main\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport java.security.MessageDigest\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport kotlin.experimental.and\r\n\r\n\r\nclass InitialActivity : AppCompatActivity() {\r\n    // profileDb\r\n    private var profileDb : ProflieDB? = null\r\n\r\n    // google signin\r\n    var auth: FirebaseAuth? = null\r\n    val GOOGLE_REQUEST_CODE = 99\r\n    val TAG = \"googleLogin\"\r\n    private lateinit var googleSignInClient: GoogleSignInClient\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private lateinit var btn_googleSignIn : SignInButton\r\n    private lateinit var btn_generalSignup : Button\r\n    private lateinit var btn_generalLogin : Button\r\n    private lateinit var btn_kakaoLogin : ImageButton\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_initial)\r\n\r\n        btn_googleSignIn = findViewById(R.id.btn_googleSignIn)\r\n        btn_generalSignup = findViewById(R.id.btn_generalsignup)\r\n        btn_generalLogin = findViewById(R.id.btn_generalLogin)\r\n        btn_kakaoLogin = findViewById(R.id.btn_kakaoLogin)\r\n\r\n\r\n        // 회원가입 & onClickListner\r\n        btn_generalSignup.setOnClickListener{\r\n            val id1: TextView = findViewById(R.id.et_id)\r\n            val pw1: TextView = findViewById(R.id.et_pw)\r\n            val time1: LocalDateTime = LocalDateTime.now()\r\n            val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")\r\n            val formatted = time1.format(formatter)\r\n            val loginID = getHash(id1.text.toString().trim()).trim()\r\n            val loginPW = getHash(pw1.text.toString().trim()).trim()\r\n            Log.d(\"Giho\",\"ID is hashed to : \"+loginID)\r\n            Log.d(\"Giho\",\"PW is hashed to : \"+loginPW)\r\n            val loginDate : String = formatted.toString().trim()\r\n            generalSignup(loginID, loginPW, loginDate)\r\n        }\r\n\r\n        // 로그인 & onClickListner\r\n        btn_generalLogin.setOnClickListener{\r\n            val id1: TextView = findViewById(R.id.et_id)\r\n            val pw1: TextView = findViewById(R.id.et_pw)\r\n            val time1: LocalDateTime = LocalDateTime.now()\r\n            val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")\r\n            val formatted = time1.format(formatter)\r\n            val loginID = getHash(id1.text.toString().trim()).trim()\r\n            val loginPW = getHash(pw1.text.toString().trim()).trim()\r\n            Log.d(\"Giho\",\"ID is hashed to : \"+loginID)\r\n            Log.d(\"Giho\",\"PW is hashed to : \"+loginPW)\r\n            val loginDate : String = formatted.toString().trim()\r\n            generalLoginCheck(loginID, loginPW, loginDate)\r\n        }\r\n\r\n        // google Sign in & onClickListner\r\n        auth = FirebaseAuth.getInstance()\r\n        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(getString(R.string.default_web_client_id))\r\n            .requestEmail()\r\n            .build()\r\n        googleSignInClient = GoogleSignIn.getClient(this,gso)\r\n\r\n        btn_googleSignIn.setOnClickListener {\r\n            googleSignIn()\r\n        }\r\n\r\n        // kakao login & onClickListner\r\n        btn_kakaoLogin.setOnClickListener(View.OnClickListener {\r\n            // 로그인 공통 callback 구성\r\n            val callback: (OAuthToken?, Throwable?) -> Unit = { token, error ->\r\n                if (error != null) {\r\n                    Log.e(TAG, \"로그인 실패\", error)\r\n                }\r\n                else if (token != null) {\r\n                    Log.i(TAG, \"로그인 성공 ${token.accessToken}\")\r\n                    loginSuccess(\"KAKAO\") // memorize login method and move to MainActivity\r\n                }\r\n            }\r\n            // 카카오톡이 설치되어 있으면 카카오톡으로 로그인, 아니면 카카오계정으로 로그인\r\n            if (LoginClient.instance.isKakaoTalkLoginAvailable(this)) {\r\n                LoginClient.instance.loginWithKakaoTalk(this, callback = callback)\r\n            } else {\r\n                LoginClient.instance.loginWithKakaoAccount(this, callback = callback)\r\n            }\r\n            showLoadingDialog()\r\n        })\r\n    }\r\n\r\n    // general signup\r\n    fun generalSignup(u_id: String, u_pw: String, u_date : String) {\r\n        var api_signup: Retrofitsignup? = null\r\n        val url = \"http://stockgame.dothome.co.kr/test/Signup.php/\"\r\n        var gson: Gson = GsonBuilder()\r\n            .setLenient()\r\n            .create()\r\n        //creating retrofit object\r\n        var retrofit =\r\n            Retrofit.Builder()\r\n                .baseUrl(url)\r\n                .addConverterFactory(GsonConverterFactory.create(gson))\r\n                .build()\r\n        //creating our api\r\n        api_signup = retrofit.create(Retrofitsignup::class.java)\r\n        api_signup.retro_signup(u_id, u_pw, u_date).enqueue(object : Callback<String> {\r\n            override fun onFailure(call: Call<String>, t: Throwable) {\r\n                Toast.makeText(this@InitialActivity, t.message, Toast.LENGTH_LONG).show()\r\n            }\r\n            override fun onResponse(call: Call<String>, response: retrofit2.Response<String>) {\r\n                val code: String = response.body()!!\r\n                if(code == \"444\"){\r\n                    Toast.makeText(this@InitialActivity, \"공백 아이디는 불가합니다.\", Toast.LENGTH_LONG).show()\r\n                }\r\n                if(code == \"555\"){\r\n                    Toast.makeText(this@InitialActivity, \"이미 등록된 아이디입니다.\", Toast.LENGTH_LONG).show()\r\n                }\r\n                if(code == \"666\"){\r\n                    Toast.makeText(this@InitialActivity, \"회원가입이 완료되었습니다!\", Toast.LENGTH_LONG).show()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // general login\r\n    fun generalLoginCheck(u_id: String, u_pw: String, u_date: String) {\r\n        var funlogincheck: Retrofitlogincheck? = null\r\n        val url = \"http://stockgame.dothome.co.kr/test/logincheck.php/\"\r\n        var gson: Gson = GsonBuilder()\r\n            .setLenient()\r\n            .create()\r\n        //creating retrofit object\r\n        var retrofit =\r\n            Retrofit.Builder()\r\n                .baseUrl(url)\r\n                .addConverterFactory(GsonConverterFactory.create(gson))\r\n                .build()\r\n        //creating our api\r\n        funlogincheck= retrofit.create(Retrofitlogincheck::class.java)\r\n        funlogincheck.post_logincheck(u_id, u_pw, u_date).enqueue(object : Callback<String> {\r\n            override fun onFailure(call: Call<String>, t: Throwable) {\r\n                Toast.makeText(this@InitialActivity, \"아이디나 비밀번호가 맞지 않습니다.\", Toast.LENGTH_LONG).show()\r\n            }\r\n            override fun onResponse(call: Call<String>, response: retrofit2.Response<String>) {\r\n                if (response.isSuccessful && response.body() != null) {\r\n                    val okcode: String = response.body()!!\r\n                    if (okcode == \"7774\"){\r\n                        Toast.makeText(this@InitialActivity, \"로그인 성공!\", Toast.LENGTH_LONG).show()\r\n                        loginSuccess(\"GENERAL\") // memorize login method and move to MainActivity\r\n                    }\r\n                    if (okcode == \"4\"){\r\n                        Toast.makeText(this@InitialActivity, \"아이디나 비밀번호가 틀렸습니다.\", Toast.LENGTH_LONG).show()\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // google Sign In\r\n    private fun googleSignIn() {\r\n        val signInIntent = googleSignInClient.signInIntent\r\n        startActivityForResult(signInIntent, GOOGLE_REQUEST_CODE)\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);\r\n        if (requestCode == GOOGLE_REQUEST_CODE) {\r\n            val task = GoogleSignIn.getSignedInAccountFromIntent(data)\r\n            try {\r\n                // Google Sign In was successful, authenticate with Firebase\r\n                val account = task.getResult(ApiException::class.java)!!\r\n                Log.d(TAG, \"firebaseAuthWithGoogle:\" + account.id)\r\n                firebaseAuthWithGoogle(account.idToken!!)\r\n            } catch (e: ApiException) {\r\n                // Google Sign In failed, update UI appropriately\r\n                Log.w(TAG, \"Google sign in failed\", e)\r\n                Toast.makeText(this, \"로그인 실패\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun firebaseAuthWithGoogle(idToken: String) {\r\n        val credential = GoogleAuthProvider.getCredential(idToken, null)\r\n        showLoadingDialog()\r\n        auth?.signInWithCredential(credential)\r\n            ?.addOnCompleteListener(this) { task ->\r\n                if (task.isSuccessful) {\r\n                    // Sign in success, update UI with the signed-in user's information\r\n                    Log.d(TAG, \"로그인 성공\")\r\n                    val user = auth!!.currentUser\r\n                    loginSuccess(\"GOOGLE\") // memorize login method and move to MainActivity\r\n                } else {\r\n                    // If sign in fails, display a message to the user.\r\n                    Log.w(TAG, \"signInWithCredential:failure\", task.exception)\r\n                }\r\n            }\r\n    }\r\n\r\n    private fun loginSuccess(method: String){\r\n        memorizeLogMethod(method)\r\n        delLoadingDialog()\r\n        if(profileDb?.profileDao()?.getNickname()==\"#########first_login##########\"){\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n        } else {\r\n            val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n        finish()\r\n    }\r\n\r\n    // remember which login method did user used with DB\r\n    private fun memorizeLogMethod(method : String){\r\n        profileDb = ProflieDB?.getInstace(this)\r\n        // if profile DB is empty insert dummy\r\n        if(profileDb?.profileDao()?.getAll().isNullOrEmpty()){\r\n            val setRunnable = Runnable {\r\n                val newProfile = Profile(1, \"#########first_login##########\", 0, \"\", 1, 0)\r\n                profileDb?.profileDao()?.insert(newProfile)\r\n            }\r\n            var setThread = Thread(setRunnable)\r\n            setThread.start()\r\n        }\r\n        // save which login method user have used\r\n        profileDb = ProflieDB?.getInstace(this)\r\n        var temp = profileDb?.profileDao()?.getLogin()\r\n        if(method==\"GENERAL\")   temp = temp?.or(1)\r\n        else if(method==\"GOOGLE\")   temp = temp?.or(2)\r\n        else if(method==\"KAKAO\")    temp = temp?.or(4)\r\n        // update the login method to DB\r\n        val setRunnable = Runnable {\r\n            val newProfile = Profile()\r\n            newProfile.id = profileDb?.profileDao()?.getId()?.toLong()\r\n            newProfile.nickname = profileDb?.profileDao()?.getNickname()!!\r\n            newProfile.history = profileDb?.profileDao()?.getHistory()!!\r\n            newProfile.level = profileDb?.profileDao()?.getLevel()!!\r\n            newProfile.login = temp!!\r\n            newProfile.profit = profileDb?.profileDao()?.getProfit()!!\r\n            profileDb?.profileDao()?.update(newProfile)\r\n        }\r\n        var setThread = Thread(setRunnable)\r\n        setThread.start()\r\n    }\r\n\r\n    private fun getHash(input : String):String{\r\n        val salt1 = \"We-are-301-guys\"\r\n        val salt2 = \"We-are-gonna-be-rich\"\r\n        var adjusted_input_1 = input+salt1\r\n        var adjusted_input_2 = input+salt2\r\n        var messagedigest = MessageDigest.getInstance(\"SHA-256\")\r\n        var result1 = String(messagedigest.digest(adjusted_input_1.hashCode().toString().toByteArray()))\r\n        var result2 = String(messagedigest.digest(adjusted_input_2.hashCode().toString().toByteArray()))\r\n        var adjusted_input_3 = result1+result2\r\n        var result3 = messagedigest.digest(adjusted_input_3.hashCode().toString().toByteArray())\r\n\r\n        var sb: StringBuilder = StringBuilder()\r\n\r\n        var i = 0\r\n        while (i < result3.count()) {\r\n            sb.append(((result3[i].and(0xff.toByte())) + 0x100).toString(16).substring(0, 1))\r\n            i++\r\n        }\r\n\r\n        var final_result = sb.toString()\r\n        return final_result\r\n    }\r\n\r\n    // 두번 누르면 종료되는 코드\r\n    var time3: Long = 0\r\n    override fun onBackPressed() {\r\n        val time1 = System.currentTimeMillis()\r\n        val time2 = time1 - time3\r\n        if (time2 in 0..2000) {\r\n            // 이거 3줄 다 써야 안전하게 종료\r\n            moveTaskToBack(true)\r\n            finish()\r\n            android.os.Process.killProcess(android.os.Process.myPid())\r\n        }\r\n        else {\r\n            time3 = time1\r\n            Toast.makeText(applicationContext, \"한번 더 누르시면 종료됩니다.\",Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n    // 로딩 창 띄우는 코드\r\n    private fun showLoadingDialog() {\r\n        val dialog = Dialog_loading(this@InitialActivity)\r\n        CoroutineScope(Main).launch {\r\n            dialog.start()\r\n        }\r\n    }\r\n    private fun delLoadingDialog() {\r\n        val dialog = Dialog_loading(this@InitialActivity)\r\n        CoroutineScope(Main).launch {\r\n            dialog.finish()\r\n        }\r\n    }\r\n//    override fun onDestroy() {\r\n//        Log.d(TAG, \"called onDestroy\");\r\n//        delLoadingDialog()\r\n//        super.onDestroy();\r\n//    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/InitialActivity.kt	(revision 50ba8d6365422cc57d5764af5117756a33874c1c)
+++ app/src/main/java/com/example/myapplication/InitialActivity.kt	(date 1612441811462)
@@ -11,6 +11,7 @@
 import android.widget.Toast
 import androidx.annotation.RequiresApi
 import androidx.appcompat.app.AppCompatActivity
+import androidx.lifecycle.ViewModelProvider
 import com.example.myapplication.data.Profile
 import com.example.myapplication.data.ProflieDB
 import com.google.android.gms.auth.api.signin.GoogleSignIn
@@ -41,6 +42,8 @@
 class InitialActivity : AppCompatActivity() {
     // profileDb
     private var profileDb : ProflieDB? = null
+    var saveid :String = ""
+    var savepw :String = ""
 
     // google signin
     var auth: FirebaseAuth? = null
@@ -64,11 +67,11 @@
         btn_generalLogin = findViewById(R.id.btn_generalLogin)
         btn_kakaoLogin = findViewById(R.id.btn_kakaoLogin)
 
-
         // 회원가입 & onClickListner
         btn_generalSignup.setOnClickListener{
             val id1: TextView = findViewById(R.id.et_id)
             val pw1: TextView = findViewById(R.id.et_pw)
+
             val time1: LocalDateTime = LocalDateTime.now()
             val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
             val formatted = time1.format(formatter)
@@ -84,6 +87,8 @@
         btn_generalLogin.setOnClickListener{
             val id1: TextView = findViewById(R.id.et_id)
             val pw1: TextView = findViewById(R.id.et_pw)
+            saveid = id1.text.toString()
+            savepw = pw1.text.toString()
             val time1: LocalDateTime = LocalDateTime.now()
             val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
             val formatted = time1.format(formatter)
@@ -92,6 +97,7 @@
             Log.d("Giho","ID is hashed to : "+loginID)
             Log.d("Giho","PW is hashed to : "+loginPW)
             val loginDate : String = formatted.toString().trim()
+
             generalLoginCheck(loginID, loginPW, loginDate)
         }
 
@@ -243,7 +249,10 @@
         memorizeLogMethod(method)
         delLoadingDialog()
         if(profileDb?.profileDao()?.getNickname()=="#########first_login##########"){
+            saveidpw(saveid.trim(), savepw.trim())
+
             val intent = Intent(this, ProfileActivity::class.java)
+
             startActivity(intent)
         } else {
             val intent = Intent(this, MainActivity::class.java)
@@ -258,7 +267,8 @@
         // if profile DB is empty insert dummy
         if(profileDb?.profileDao()?.getAll().isNullOrEmpty()){
             val setRunnable = Runnable {
-                val newProfile = Profile(1, "#########first_login##########", 0, "", 1, 0)
+
+                val newProfile = Profile(1, "#########first_login##########", 0, "", 1, 0,"a","")
                 profileDb?.profileDao()?.insert(newProfile)
             }
             var setThread = Thread(setRunnable)
@@ -279,6 +289,8 @@
             newProfile.level = profileDb?.profileDao()?.getLevel()!!
             newProfile.login = temp!!
             newProfile.profit = profileDb?.profileDao()?.getProfit()!!
+            newProfile.login_id =profileDb?.profileDao()?.getLoginid()!!
+            newProfile.login_pw =profileDb?.profileDao()?.getLoginpw()!!
             profileDb?.profileDao()?.update(newProfile)
         }
         var setThread = Thread(setRunnable)
@@ -337,10 +349,49 @@
             dialog.finish()
         }
     }
-//    override fun onDestroy() {
-//        Log.d(TAG, "called onDestroy");
-//        delLoadingDialog()
-//        super.onDestroy();
+
+    fun saveidpw(id : String, pw: String){
+        profileDb = ProflieDB?.getInstace(this)
+        var tmp : String = id
+        val setRunnable = Runnable {
+            val newProfile = Profile()
+            newProfile.id = profileDb?.profileDao()?.getId()?.toLong()
+            newProfile.nickname = profileDb?.profileDao()?.getNickname()!!
+            newProfile.history = profileDb?.profileDao()?.getHistory()!!
+            newProfile.level = profileDb?.profileDao()?.getLevel()!!
+            newProfile.login = profileDb?.profileDao()?.getLogin()!!
+            newProfile.profit = profileDb?.profileDao()?.getProfit()!!
+            newProfile.login_id = id
+            newProfile.login_pw = pw
+            tmp = newProfile.login_id
+
+            profileDb?.profileDao()?.update(newProfile)
+        }
+            var setThread = Thread(setRunnable)
+            setThread.start()
+    }
+
+
+//    private fun updatelogOutInFo2DB(method : String){
+//        var mask : Int = 0
+//        var tmp : Int = 0
+//
+//        profileDb = ProflieDB?.getInstace(this)
+//        if(!profileDb?.profileDao()?.getAll().isNullOrEmpty()) {
+//            val setRunnable = Runnable {
+//                val newProfile = Profile()
+//                newProfile.id = profileDb?.profileDao()?.getId()?.toLong()
+//                newProfile.nickname = profileDb?.profileDao()?.getNickname()!!
+//                newProfile.history = profileDb?.profileDao()?.getHistory()!!
+//                newProfile.level = profileDb?.profileDao()?.getLevel()!!
+//                newProfile.login = profileDb?.profileDao()?.getLogin()!!-mask
+//                newProfile.profit = profileDb?.profileDao()?.getProfit()!!
+//                tmp = newProfile.profit
+//            }
+//            Toast.makeText(this@InitialActivity, tmp, Toast.LENGTH_LONG).show()
+//            var setThread = Thread(setRunnable)
+//            setThread.start()
+//        }
 //    }
 }
 
Index: app/src/main/java/com/example/myapplication/RetrofitChange.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/RetrofitChange.kt	(date 1612442857010)
+++ app/src/main/java/com/example/myapplication/RetrofitChange.kt	(date 1612442857010)
@@ -0,0 +1,16 @@
+package com.example.myapplication
+
+import retrofit2.Call
+import retrofit2.http.Field
+import retrofit2.http.FormUrlEncoded
+import retrofit2.http.POST
+
+interface RetrofitChange {
+    @FormUrlEncoded
+    @POST("/test/changepw.php/")
+    fun retro_changepw(
+            @Field("u_id") u_id : String,
+            @Field("u_pw") u_pw : String,
+            @Field("new_pw") new_pw : String
+            ): Call<String>
+}
\ No newline at end of file
Index: app/src/main/res/layout/dialog_change_pw.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/dialog_change_pw.xml	(date 1612425481796)
+++ app/src/main/res/layout/dialog_change_pw.xml	(date 1612425481796)
@@ -0,0 +1,97 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="#ffffff">
+    <TextView
+        android:id="@+id/title"
+        android:layout_width="match_parent"
+        android:layout_height="60dp"
+        android:gravity="center"
+        android:textColor="@color/black"
+        android:textSize="16dp"
+        android:text="비밀번호 변경"
+        android:background="@color/red"/>
+
+    <View
+        android:layout_width="match_parent"
+        android:layout_height="10dp"
+        android:background="@color/white"/>
+
+    <View
+        android:layout_width="match_parent"
+        android:layout_height="10dp"
+        android:background="@color/white"/>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="50dp">
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="50dp"
+            android:text="현재 비밀번호 : "
+            android:gravity="center|left"
+            android:layout_weight="3"/>
+        <EditText
+            android:id="@+id/pw_present"
+            android:layout_width="match_parent"
+            android:layout_height="50dp"
+            android:layout_gravity="left"
+            android:layout_weight="2"/>
+    </LinearLayout>
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="50dp">
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="50dp"
+            android:text="변경 비밀번호 : "
+            android:gravity="center|left"
+            android:layout_weight="3"/>
+        <EditText
+            android:id="@+id/pw_future"
+            android:layout_width="match_parent"
+            android:layout_height="50dp"
+            android:layout_gravity="left"
+            android:layout_weight="2"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="60dp"
+        android:orientation="horizontal">
+
+        <Button
+            android:id="@+id/okButton"
+            android:layout_width="match_parent"
+            android:layout_height="60dp"
+            android:layout_weight="1"
+            android:gravity="center"
+            android:text="확인"
+            android:textColor="#000000"
+            android:textSize="16dp"
+            android:backgroundTint="@color/red"/>
+
+        <View
+            android:layout_width="1dp"
+            android:layout_height="match_parent"
+            android:background="@color/white"/>
+
+        <Button
+            android:id="@+id/cancelButton"
+            android:layout_width="match_parent"
+            android:layout_height="60dp"
+            android:layout_weight="1"
+            android:gravity="center"
+            android:text="취소"
+            android:textColor="#000000"
+            android:textSize="16dp"
+            android:backgroundTint="@color/white"/>
+    </LinearLayout>
+
+    <View
+        android:layout_width="match_parent"
+        android:layout_height="1dp"
+        android:background="#000000"/>
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/myapplication/Dialog_change_pw.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/Dialog_change_pw.kt	(date 1612443560743)
+++ app/src/main/java/com/example/myapplication/Dialog_change_pw.kt	(date 1612443560743)
@@ -0,0 +1,132 @@
+package com.example.myapplication
+
+import android.app.Dialog
+import android.content.Context
+import android.view.Window
+import android.widget.Button
+import android.widget.EditText
+import android.widget.SeekBar
+import android.widget.Toast
+import com.example.myapplication.data.Profile
+import com.example.myapplication.data.ProflieDB
+import com.google.gson.Gson
+import com.google.gson.GsonBuilder
+import retrofit2.Call
+import retrofit2.Callback
+import retrofit2.Retrofit
+import retrofit2.converter.gson.GsonConverterFactory
+import java.security.MessageDigest
+import kotlin.experimental.and
+
+
+class Dialog_change_pw(context: Context) {
+    var mContext: Context = context
+    private val dlg = Dialog(context)   //부모 액티비티의 context 가 들어감
+    private lateinit var btnOK : Button
+    private lateinit var btnCancel : Button
+    private lateinit var pw_present: EditText
+    private lateinit var pw_future : EditText
+    private var profileDb: ProflieDB? = null
+    fun start(){
+        profileDb = ProflieDB.getInstace(mContext)
+
+        dlg.requestWindowFeature(Window.FEATURE_NO_TITLE) //타이틀바 제거
+        dlg.setContentView(R.layout.dialog_change_pw) //다이얼로그에 사용할 xml 파일을 불러옴
+        dlg.setCancelable(false) //다이얼로그의 바깥 화면을 눌렀을 때 다이얼로그가 닫히지 않도록 함
+        btnOK = dlg.findViewById(R.id.okButton)
+        btnCancel = dlg.findViewById(R.id.cancelButton)
+        pw_present = dlg.findViewById(R.id.pw_present)
+        pw_future = dlg.findViewById(R.id.pw_future)
+
+        val hashid =getHash(profileDb?.profileDao()?.getLoginid().toString().trim()).trim()
+        val hashpw =getHash(pw_present.text.toString().trim()).trim()
+        val hashnewpw =getHash(pw_future.text.toString().trim()).trim()
+
+        btnOK.setOnClickListener {
+            if(profileDb?.profileDao()?.getLoginpw().toString().trim() == pw_present.text.toString().trim())
+            {
+                changepw(hashid,hashpw, hashnewpw)
+                dlg.dismiss()
+            }
+            else{
+                Toast.makeText(mContext, "비밀번호가 틀렸습니다.", Toast.LENGTH_LONG).show()
+            }
+
+        }
+        btnCancel.setOnClickListener {
+            dlg.dismiss()
+        }
+
+        dlg.show()
+    }
+
+    // change password
+    fun changepw(u_id: String, u_pw: String, new_pw :String) {
+        var funchangepw: RetrofitChange? = null
+        val url = "http://stockgame.dothome.co.kr/test/changepw.php/"
+        var gson: Gson = GsonBuilder()
+                .setLenient()
+                .create()
+        //creating retrofit object
+        var retrofit =
+                Retrofit.Builder()
+                        .baseUrl(url)
+                        .addConverterFactory(GsonConverterFactory.create(gson))
+                        .build()
+        //creating our api
+        funchangepw= retrofit.create(RetrofitChange::class.java)
+        funchangepw.retro_changepw(u_id, u_pw, new_pw).enqueue(object : Callback<String> {
+            override fun onFailure(call: Call<String>, t: Throwable) {
+                //TODO
+                Toast.makeText(mContext, t.message, Toast.LENGTH_LONG).show()
+            }
+            override fun onResponse(call: Call<String>, response: retrofit2.Response<String>) {
+                if (response.isSuccessful && response.body() != null) {
+                    //val okcode: String = response.body()!!
+                    //TODO
+                    Toast.makeText(mContext, "비밀번호 변경이 완료되었습니다.", Toast.LENGTH_LONG).show()
+                    updateInFo(pw_future.text.toString().trim())
+                }
+            }
+        })
+    }
+    private fun getHash(input : String):String{
+        val salt1 = "We-are-301-guys"
+        val salt2 = "We-are-gonna-be-rich"
+        var adjusted_input_1 = input+salt1
+        var adjusted_input_2 = input+salt2
+        var messagedigest = MessageDigest.getInstance("SHA-256")
+        var result1 = String(messagedigest.digest(adjusted_input_1.hashCode().toString().toByteArray()))
+        var result2 = String(messagedigest.digest(adjusted_input_2.hashCode().toString().toByteArray()))
+        var adjusted_input_3 = result1+result2
+        var result3 = messagedigest.digest(adjusted_input_3.hashCode().toString().toByteArray())
+
+        var sb: StringBuilder = StringBuilder()
+
+        var i = 0
+        while (i < result3.count()) {
+            sb.append(((result3[i].and(0xff.toByte())) + 0x100).toString(16).substring(0, 1))
+            i++
+        }
+
+        var final_result = sb.toString()
+        return final_result
+    }
+    private fun updateInFo(pw : String){
+        profileDb = ProflieDB?.getInstace(mContext)
+        val setRunnable = Runnable {
+            val newProfile = Profile()
+            newProfile.id = profileDb?.profileDao()?.getId()?.toLong()
+            newProfile.nickname = profileDb?.profileDao()?.getNickname()!!
+            newProfile.history = profileDb?.profileDao()?.getHistory()!!
+            newProfile.level = profileDb?.profileDao()?.getLevel()!!
+            newProfile.login = profileDb?.profileDao()?.getLogin()!!
+            newProfile.profit = profileDb?.profileDao()?.getProfit()!!
+            newProfile.login_id = profileDb?.profileDao()?.getLoginid()!!
+            newProfile.login_pw = pw
+            profileDb?.profileDao()?.update(newProfile)
+        }
+        var setThread = Thread(setRunnable)
+        setThread.start()
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/myapplication/Dialog_nick.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage com.example.myapplication\r\n\r\n\r\nimport android.app.Dialog\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.provider.ContactsContract\r\nimport android.view.Window\r\nimport android.widget.*\r\nimport androidx.core.content.ContextCompat.startActivity\r\nimport com.example.myapplication.R\r\nimport com.example.myapplication.data.Profile\r\nimport com.example.myapplication.data.ProflieDB\r\n\r\nclass Dialog_nick(context : Context) {\r\n\r\n    private val dlg = Dialog(context) //부모 액티비티의 context 가 들어감\r\n    private lateinit var btn_ok : Button\r\n    private lateinit var nickname_editText : EditText\r\n    private lateinit var listenter: Dialog_nick.NicknameDialogClickedListener\r\n\r\n\r\n    fun start(profileDb :ProflieDB?) {\r\n        dlg.requestWindowFeature(Window.FEATURE_NO_TITLE) //타이틀바 제거\r\n        dlg.setContentView(R.layout.dialog_nickname) //다이얼로그에 사용할 xml 파일을 불러옴\r\n        dlg.setCancelable(false) //다이얼로그의 바깥 화면을 눌렀을 때 다이얼로그가 닫히지 않도록 함\r\n        //\r\n        btn_ok = dlg.findViewById(R.id.nicknameokbtn)\r\n        nickname_editText = dlg.findViewById(R.id.editNickName)\r\n\r\n\r\n        btn_ok.setOnClickListener {\r\n            val setRunnable = Runnable {\r\n                val newProfile = Profile()\r\n                newProfile.id = profileDb?.profileDao()?.getId()?.toLong()\r\n                newProfile.nickname = nickname_editText.text.toString()\r\n                newProfile.history = profileDb?.profileDao()?.getHistory()!!\r\n                newProfile.level = profileDb?.profileDao()?.getLevel()!!\r\n                newProfile.login = profileDb?.profileDao()?.getLogin()!!\r\n                newProfile.profit = profileDb?.profileDao()?.getProfit()!!\r\n                profileDb?.profileDao()?.update(newProfile)\r\n            }\r\n\r\n            var setThread = Thread(setRunnable)\r\n            setThread.start()\r\n\r\n            var result:String = nickname_editText.text.toString()\r\n            listenter.onNicknameClicked(result)\r\n            dlg.dismiss()\r\n        }\r\n        dlg.show()\r\n    }\r\n\r\n    fun setOnNicknameClickedListener(listener: (String)->Unit){\r\n        this.listenter = object : NicknameDialogClickedListener{\r\n            override fun onNicknameClicked(content: String) {\r\n                listener(content)\r\n            }\r\n        }\r\n    }\r\n\r\n    interface NicknameDialogClickedListener{\r\n        fun onNicknameClicked(content: String)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/Dialog_nick.kt	(revision 50ba8d6365422cc57d5764af5117756a33874c1c)
+++ app/src/main/java/com/example/myapplication/Dialog_nick.kt	(date 1612441122713)
@@ -39,6 +39,8 @@
                 newProfile.level = profileDb?.profileDao()?.getLevel()!!
                 newProfile.login = profileDb?.profileDao()?.getLogin()!!
                 newProfile.profit = profileDb?.profileDao()?.getProfit()!!
+                newProfile.login_id = profileDb?.profileDao()?.getLoginid()!!
+                newProfile.login_pw = profileDb?.profileDao()?.getLoginpw()!!
                 profileDb?.profileDao()?.update(newProfile)
             }
 
Index: app/src/main/java/com/example/myapplication/data/ProfileDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.data\r\n\r\nimport androidx.room.Dao\r\nimport androidx.room.Insert\r\nimport androidx.room.Query\r\nimport androidx.room.Update\r\n\r\n@Dao\r\ninterface ProfileDao {\r\n    @Query(\"SELECT * FROM Profile\")\r\n    fun getAll(): MutableList<Profile>\r\n\r\n    @Query(\"SELECT id FROM Profile\")\r\n    fun getId(): Int\r\n\r\n    @Query(\"SELECT nickname FROM Profile\")\r\n    fun getNickname(): String\r\n\r\n    @Query(\"SELECT profit FROM Profile\")\r\n    fun getProfit(): Int\r\n\r\n    @Query(\"SELECT History FROM Profile\")\r\n    fun getHistory(): String\r\n\r\n    @Query(\"SELECT level FROM Profile\")\r\n    fun getLevel(): Int\r\n\r\n    @Query(\"SELECT login FROM Profile\")\r\n    fun getLogin(): Int\r\n\r\n    @Insert\r\n    fun insert(profile: Profile)\r\n\r\n    @Update\r\n    fun update(profile: Profile)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/data/ProfileDao.kt	(revision 50ba8d6365422cc57d5764af5117756a33874c1c)
+++ app/src/main/java/com/example/myapplication/data/ProfileDao.kt	(date 1612437155851)
@@ -28,6 +28,12 @@
     @Query("SELECT login FROM Profile")
     fun getLogin(): Int
 
+    @Query("SELECT login_id FROM Profile")
+    fun getLoginid(): String
+
+    @Query("SELECT login_pw FROM Profile")
+    fun getLoginpw(): String
+
     @Insert
     fun insert(profile: Profile)
 
Index: app/src/main/java/com/example/myapplication/data/Profile.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.data\r\n\r\nimport androidx.room.ColumnInfo\r\nimport androidx.room.Entity\r\nimport androidx.room.PrimaryKey\r\n\r\n@Entity\r\ndata class Profile (@PrimaryKey(autoGenerate = true) var id: Long?,\r\n@ColumnInfo(name=\"nickname\") var nickname : String,\r\n               @ColumnInfo(name=\"profit\") var profit : Int,\r\n               @ColumnInfo(name=\"history\") var history : String,\r\n               @ColumnInfo(name=\"level\") var level : Int,\r\n               @ColumnInfo(name= \"login\" ) var login: Int\r\n)\r\n{\r\n    constructor(): this(null,\"nickname\",0,\"no play\",1, 0)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/data/Profile.kt	(revision 50ba8d6365422cc57d5764af5117756a33874c1c)
+++ app/src/main/java/com/example/myapplication/data/Profile.kt	(date 1612441189090)
@@ -5,13 +5,14 @@
 import androidx.room.PrimaryKey
 
 @Entity
-data class Profile (@PrimaryKey(autoGenerate = true) var id: Long?,
-@ColumnInfo(name="nickname") var nickname : String,
-               @ColumnInfo(name="profit") var profit : Int,
-               @ColumnInfo(name="history") var history : String,
-               @ColumnInfo(name="level") var level : Int,
-               @ColumnInfo(name= "login" ) var login: Int
-)
-{
-    constructor(): this(null,"nickname",0,"no play",1, 0)
+data class Profile(@PrimaryKey(autoGenerate = true) var id: Long?,
+                   @ColumnInfo(name = "nickname") var nickname: String,
+                   @ColumnInfo(name = "profit") var profit: Int,
+                   @ColumnInfo(name = "history") var history: String,
+                   @ColumnInfo(name = "level") var level: Int,
+                   @ColumnInfo(name = "login") var login: Int,
+                   @ColumnInfo(name = "login_id") var login_id: String,
+                    @ColumnInfo(name = "login_pw") var login_pw: String
+) {
+    constructor() : this(null, "nickname", 0, "no play", 1, 0, "","")
 }
\ No newline at end of file
